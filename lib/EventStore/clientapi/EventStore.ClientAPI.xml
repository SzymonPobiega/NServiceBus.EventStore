<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EventStore.ClientAPI</name>
    </assembly>
    <members>
        <member name="T:EventStore.ClientAPI.AllCheckpoint">
            <summary>
            This class contains constants to be used when setting up subscriptions
            using the  <see cref="M:EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},System.Boolean,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32)"/> method on
            <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/>.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.AllCheckpoint.AllStart">
            <summary>
            Indicates that a catch-up subscription should receive all events
            in the database.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.AllEventsSlice">
            <summary>
            The result of a read operation from the $all stream.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.AllEventsSlice.ReadDirection">
            <summary>
            The direction of read request.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.AllEventsSlice.FromPosition">
            <summary>
            A <see cref="T:EventStore.ClientAPI.Position"/> representing the position where this slice was read from.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.AllEventsSlice.NextPosition">
            <summary>
            A <see cref="T:EventStore.ClientAPI.Position"/> representing the position where the next slice should be read from.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.AllEventsSlice.Events">
            <summary>
            The events read.
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.AllEventsSlice.IsEndOfStream">
            <summary>
            A boolean representing whether or not this is the end of the $all stream.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.ClientOperations.PersistentSubscriptionNakEventAction">
            <summary>
            Actions to be taken by server in the case of a client NAK
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ClientOperations.PersistentSubscriptionNakEventAction.Unknown">
            <summary>
            Client unknown on action. Let server decide
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ClientOperations.PersistentSubscriptionNakEventAction.Park">
            <summary>
            Park message do not resend. Put on poison queue
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ClientOperations.PersistentSubscriptionNakEventAction.Retry">
            <summary>
            Explicitly retry the message.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ClientOperations.PersistentSubscriptionNakEventAction.Skip">
            <summary>
            Skip this message do not resend do not put in poison queue
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ClientOperations.PersistentSubscriptionNakEventAction.Stop">
            <summary>
            Stop the subscription.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.GossipSeed">
            <summary>
            Represents a source of cluster gossip.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.GossipSeed.EndPoint">
            <summary>
            The <see cref="T:System.Net.IPEndPoint"/> for the External HTTP endpoint of the gossip seed.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.GossipSeed.HostHeader">
            <summary>
            The host header to be sent when requesting gossip.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.GossipSeed.#ctor(System.Net.IPEndPoint,System.String)">
            <summary>
            Creates a new <see cref="T:EventStore.ClientAPI.GossipSeed"/>.
            </summary>
            <param name="endPoint">The <see cref="T:System.Net.IPEndPoint"/> for the External HTTP endpoint of the gossip seed.</param>
            <param name="hostHeader">The host header to be sent when requesting gossip. Defaults to String.Empty</param>
        </member>
        <member name="T:EventStore.ClientAPI.PersistentSubscriptionSettings">
            <summary>
            Represents the settings for a <see cref="T:EventStore.ClientAPI.PersistentEventStoreSubscription"></see> you should
            normally not use this class directly but instead use a <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see>
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.ResolveLinkTos">
            <summary>
            Whether or not the <see cref="T:EventStore.ClientAPI.PersistentEventStoreSubscription"></see> should resolve linkTo events to their linked events.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.StartFrom">
            <summary>
            Where the subscription should start from (position)
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.ExtraStatistics">
            <summary>
            Whether or not in depth latency statistics should be tracked on this subscription.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.MessageTimeout">
            <summary>
            The amount of time after which a message should be considered to be timedout and retried.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.MaxRetryCount">
            <summary>
            The maximum number of retries (due to timeout) before a message get considered to be parked
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.LiveBufferSize">
            <summary>
            The size of the buffer listening to live messages as they happen
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.ReadBatchSize">
            <summary>
            The number of events read at a time when paging in history
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.HistoryBufferSize">
            <summary>
            The number of events to cache when paging through history
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.PreferRoundRobin">
            <summary>
            Whether the subscription should prefer round robin between clients of
            sending to a single client if possible.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.CheckPointAfter">
            <summary>
            The amount of time to try to checkpoint after 
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.MinCheckPointCount">
            <summary>
            The minimum number of messages to checkpoint
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.MaxCheckPointCount">
            <summary>
            The maximum number of messages to checkpoint if this number is a reached a checkpoint will be forced.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettings.#ctor(System.Boolean,System.Int32,System.Boolean,System.TimeSpan,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.TimeSpan,System.Int32,System.Int32)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettings"></see>
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder">
            <summary>
            Builds a <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettings"/> object.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.Create">
            <summary>
            Creates a new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see> object
            </summary>
            <returns>a new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see> object</returns>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.WithExtraStatistics">
            <summary>
            Sets the option to include further latency statistics. These statistics have a cost and should not be used
            in high performance situations.
            </summary>
            <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.ResolveLinkTos">
            <summary>
            Sets the option to resolve linktos on events that are found for this subscription.
            </summary>
            <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.DoNotResolveLinkTos">
            <summary>
            Sets the option to not resolve linktos on events that are found for this subscription.
            </summary>
            <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.PreferRoundRobin">
            <summary>
            If set the subscription will prefer if possible to round robin between the clients that
            are connected.
            </summary>
            <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.PreferDispatchToSingle">
            <summary>
            If set the subscription will prefer if possible to dispatch only to a single of the connected
            clients. If however the buffer limits are reached on that client it will begin sending to other 
            clients.
            </summary>
            <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.StartFromBeginning">
            <summary>
            Sets that the subscription should start from the beginning of the stream.
            </summary>
            <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.StartFrom(System.Int32)">
            <summary>
            Sets that the subscription should start from a specified location of the stream.
            </summary>
            <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.WithMessageTimeoutOf(System.TimeSpan)">
            <summary>
            Sets the timeout for a message (will be retried if an ack is not received within this timespan)
            </summary>
            <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.CheckPointAfter(System.TimeSpan)">
            <summary>
            Sets that the backend should try to checkpoint the subscription after some
            period of time. Note that if the increment of the ceheckpoint would be below
            the minimum the stream will not be checkpointed at this time.
            </summary>
            <remarks>
            It is important to tweak checkpointing for high performance streams as they cause 
            writes to happen back in the system. There is a trade off between the number of
            writes that can happen in varying failure scenarios and the frequency of 
            writing out the checkpoints within the system. Normally settings such
            as once per second with a minimum of 5-10 messages and a high max to checkpoint should
            be a good compromise for most streams though you may want to change this if you
            for instance are doing hundreds of messages/second through the subscription.
            </remarks>
            <param name="time">The amount of time to try checkpointing after</param>
            <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.MinimumCheckPointCountOf(System.Int32)">
            <summary>
            Sets the minimum checkpoint count. The subscription will not increment a checkpoint
            below this value eg if there is one item to checkpoint and it is set to five it
            will not checkpoint
            </summary>
            <remarks>
            It is important to tweak checkpointing for high performance streams as they cause 
            writes to happen back in the system. There is a trade off between the number of
            writes that can happen in varying failure scenarios and the frequency of 
            writing out the checkpoints within the system. Normally settings such
            as once per second with a minimum of 5-10 messages and a high max to checkpoint should
            be a good compromise for most streams though you may want to change this if you
            for instance are doing hundreds of messages/second through the subscription.
            </remarks>
            <param name="count">The minimum count to checkpoint</param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.MaximumCheckPointCountOf(System.Int32)">
            <summary>
            Sets the largest increment the subscription will checkpoint. If this value is 
            reached the subscription will immediately write a checkpoint. As such this value
            should normally be reasonably large so as not to cause too many writes to occur in 
            the subscription
            </summary>
            <remarks>
            It is important to tweak checkpointing for high performance streams as they cause 
            writes to happen back in the system. There is a trade off between the number of
            writes that can happen in varying failure scenarios and the frequency of 
            writing out the checkpoints within the system. Normally settings such
            as once per second with a minimum of 5-10 messages and a high max to checkpoint should
            be a good compromise for most streams though you may want to change this if you
            for instance are doing hundreds of messages/second through the subscription.
            </remarks>
            <param name="count">The maximum count to checkpoint</param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.WithMaxRetriesOf(System.Int32)">
            <summary>
            Sets the number of times a message should be retried before being considered a bad message
            </summary>
            <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.WithLiveBufferSizeOf(System.Int32)">
            <summary>
            Sets the size of the live buffer for the subscription. This is the buffer used 
            to cache messages while sending messages as they happen. The count is
            in terms of the number of messages to cache.
            </summary>
            <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.WithReadBatchOf(System.Int32)">
            <summary>
            Sets the size of the read batch used when paging in history for the subscription
            sizes should not be too big ...
            </summary>
            <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.WithBufferSizeOf(System.Int32)">
            <summary>
            Sets the size of the read batch used when paging in history for the subscription
            sizes should not be too big ...
            </summary>
            <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.StartFromCurrent">
            <summary>
            Sets that the subscription should start from where the stream is when the subscription is first connected.
            </summary>
            <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.op_Implicit(EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder)~EventStore.ClientAPI.PersistentSubscriptionSettings">
            <summary>
            Builds a <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettings"/> object from a <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"/>.
            </summary>
            <param name="builder"><see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"/> from which to build a <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"/></param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.Build">
            <summary>
            Builds a <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettings"/> object from a <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"/>.
            </summary>
                    /// <returns></returns>
        </member>
        <member name="T:EventStore.ClientAPI.PersistentSubscriptionUpdateResult">
            <summary>
            A Persistent Subscription Create Result is the result of a single operation creating a
            persistent subscription in the event store
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionUpdateResult.Status">
            <summary>
            The <see cref="T:EventStore.ClientAPI.PersistentSubscriptionUpdateResult"/> representing the status of this create attempt
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.PersistentSubscriptionUpdateStatus">
            <summary>
            Enumeration representing the status of a single subscription create message.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionUpdateStatus.Success">
            <summary>
            The subscription was created successfully
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionUpdateStatus.NotFound">
            <summary>
            The subscription already exists
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionUpdateStatus.Failure">
            <summary>
            Some failure happened creating the subscription
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionUpdateStatus.AccessDenied">
            <summary>
            You do not have permissions to update this subscription
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.StreamCheckpoint">
            <summary>
            This class contains constants to be used when setting up subscriptions
            using the  <see cref="M:EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamFrom(System.String,System.Nullable{System.Int32},System.Boolean,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32)"/> method
            on <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/>.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamCheckpoint.StreamStart">
            <summary>
            Indicates that a catch-up subscription should receive all events
            in the stream.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.ClientAuthenticationFailedEventArgs">
            <summary>
            Event Arguments for the event raised when an <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> fails
            to authenticate against an Event Store server.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.ClientAuthenticationFailedEventArgs.#ctor(EventStore.ClientAPI.IEventStoreConnection,System.String)">
            <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.ClientAuthenticationFailedEventArgs"/>.
            </summary>
            <param name="connection">The <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> responsible for raising the event.</param>
            <param name="reason">A reason for authentication failure, if known.</param>
        </member>
        <member name="P:EventStore.ClientAPI.ClientAuthenticationFailedEventArgs.Reason">
            <summary>
            A reason for authentication failure, if known.
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.ClientAuthenticationFailedEventArgs.Connection">
            <summary>
            The <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> responsible for raising the event.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.ClientErrorEventArgs">
            <summary>
            Event Arguments for the event raised when an error occurs on an <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.ClientErrorEventArgs.#ctor(EventStore.ClientAPI.IEventStoreConnection,System.Exception)">
            <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.ClientErrorEventArgs"/>.
            </summary>
            <param name="connection">The <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> responsible for raising the event.</param>
            <param name="exception">The thrown exception, if one was raised.</param>
        </member>
        <member name="P:EventStore.ClientAPI.ClientErrorEventArgs.Exception">
            <summary>
            The thrown exception, if one was raised.
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.ClientErrorEventArgs.Connection">
            <summary>
            The <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> responsible for raising the event.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.EventStorePersistentSubscription">
            <summary>
            Represents a persistent subscription connection.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventStorePersistentSubscription.DefaultBufferSize">
            <summary>
            The default buffer size for the persistent subscription
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.EventStorePersistentSubscription.Acknowledge(EventStore.ClientAPI.ResolvedEvent)">
            <summary>
            Acknowledge that a message have completed processing (this will tell the server it has been processed)
            </summary>
            <remarks>There is no need to ack a message if you have Auto Ack enabled</remarks>
            <param name="event">The <see cref="T:EventStore.ClientAPI.ResolvedEvent"></see> to acknowledge</param>
        </member>
        <member name="M:EventStore.ClientAPI.EventStorePersistentSubscription.Acknowledge(System.Collections.Generic.IEnumerable{EventStore.ClientAPI.ResolvedEvent})">
            <summary>
            Acknowledge that a message have completed processing (this will tell the server it has been processed)
            </summary>
            <remarks>There is no need to ack a message if you have Auto Ack enabled</remarks>
            <param name="events">The <see cref="T:EventStore.ClientAPI.ResolvedEvent"></see>s to acknowledge there should be less than 2000 to ack at a time.</param>
        </member>
        <member name="M:EventStore.ClientAPI.EventStorePersistentSubscription.Fail(EventStore.ClientAPI.ResolvedEvent,EventStore.ClientAPI.ClientOperations.PersistentSubscriptionNakEventAction,System.String)">
            <summary>
            Mark a message failed processing. The server will be take action based upon the action paramter
            </summary>
            <param name="event">The event to mark as failed</param>
            <param name="action">The <see cref="T:EventStore.ClientAPI.ClientOperations.PersistentSubscriptionNakEventAction"></see> action to take</param>
            <param name="reason">A string with a message as to why the failure is occuring</param>
        </member>
        <member name="M:EventStore.ClientAPI.EventStorePersistentSubscription.Fail(System.Collections.Generic.IEnumerable{EventStore.ClientAPI.ResolvedEvent},EventStore.ClientAPI.ClientOperations.PersistentSubscriptionNakEventAction,System.String)">
            <summary>
            Mark nmessages that have failed processing. The server will take action based upon the action parameter
            </summary>
            <param name="events">The events to mark as failed</param>
            <param name="action">The <see cref="T:EventStore.ClientAPI.ClientOperations.PersistentSubscriptionNakEventAction"></see> action to take</param>
            <param name="reason">A string with a message as to why the failure is occuring</param>
        </member>
        <member name="M:EventStore.ClientAPI.EventStorePersistentSubscription.Stop(System.TimeSpan)">
            <summary>
            Disconnects this client from the persistent subscriptions.
            </summary>
            <param name="timeout"></param>
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="T:EventStore.ClientAPI.EventStoreSubscription">
            <summary>
            Represents a subscription to a single stream or to the stream
            of all events in the Event Store.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventStoreSubscription.LastCommitPosition">
            <summary>
            The last commit position seen on the subscription (if this is
            a subscription to all events).
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventStoreSubscription.LastEventNumber">
            <summary>
            The last event number seen on the subscription (if this is a
            subscription to a single stream).
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreSubscription.Dispose">
            <summary>
            Unsubscribes from the stream.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreSubscription.Close">
            <summary>
            Unsubscribes from the stream.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreSubscription.Unsubscribe">
            <summary>
            Unsubscribes from the stream
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.EventStoreSubscription.IsSubscribedToAll">
            <summary>
            True if this subscription is to all streams.
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.EventStoreSubscription.StreamId">
            <summary>
            The name of the stream to which the subscription is subscribed.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.ClientReconnectingEventArgs">
            <summary>
            Event Arguments for the event raised when an <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> is
            about to reconnect to an Event Store server.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.ClientReconnectingEventArgs.#ctor(EventStore.ClientAPI.IEventStoreConnection)">
            <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.ClientReconnectingEventArgs"/>.
            </summary>
            <param name="connection">The <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> responsible for raising the event.</param>
        </member>
        <member name="P:EventStore.ClientAPI.ClientReconnectingEventArgs.Connection">
            <summary>
            The <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> responsible for raising the event.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.Common.Log.ConsoleLogger">
            <summary>
            Implementation of <see cref="T:EventStore.ClientAPI.ILogger"/> which outputs to <see cref="T:System.Console"/>.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.ILogger">
            <summary>
            Simple abstraction of a logger.
            </summary>
            <remarks>
            You can pass your own logging abstractions into the Event Store Client API. Just pass 
            in your own implementation of <see cref="T:EventStore.ClientAPI.ILogger"/> when constructing your client connection.
            </remarks>
        </member>
        <member name="M:EventStore.ClientAPI.ILogger.Error(System.String,System.Object[])">
            <summary>
            Writes an error to the logger
            </summary>
            <param name="format">Format string for the log message.</param>
            <param name="args">Arguments to be inserted into the format string.</param>
        </member>
        <member name="M:EventStore.ClientAPI.ILogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Writes an error to the logger
            </summary>
            <param name="ex">A thrown exception.</param>
            <param name="format">Format string for the log message.</param>
            <param name="args">Arguments to be inserted into the format string.</param>
        </member>
        <member name="M:EventStore.ClientAPI.ILogger.Info(System.String,System.Object[])">
            <summary>
            Writes an information message to the logger
            </summary>
            <param name="format">Format string for the log message.</param>
            <param name="args">Arguments to be inserted into the format string.</param>
        </member>
        <member name="M:EventStore.ClientAPI.ILogger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Writes an information message to the logger
            </summary>
            <param name="ex">A thrown exception.</param>
            <param name="format">Format string for the log message.</param>
            <param name="args">Arguments to be inserted into the format string.</param>
        </member>
        <member name="M:EventStore.ClientAPI.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Writes a debug message to the logger
            </summary>
            <param name="format">Format string for the log message.</param>
            <param name="args">Arguments to be inserted into the format string.</param>
        </member>
        <member name="M:EventStore.ClientAPI.ILogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Writes a debug message to the logger
            </summary>
            <param name="ex">A thrown exception.</param>
            <param name="format">Format string for the log message.</param>
            <param name="args">Arguments to be inserted into the format string.</param>
        </member>
        <member name="M:EventStore.ClientAPI.Common.Log.ConsoleLogger.Error(System.String,System.Object[])">
            <summary>
            Writes an error to the logger
            </summary>
            <param name="format">Format string for the log message.</param>
            <param name="args">Arguments to be inserted into the format string.</param>
        </member>
        <member name="M:EventStore.ClientAPI.Common.Log.ConsoleLogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Writes an error to the logger
            </summary>
            <param name="ex">A thrown exception.</param>
            <param name="format">Format string for the log message.</param>
            <param name="args">Arguments to be inserted into the format string.</param>
        </member>
        <member name="M:EventStore.ClientAPI.Common.Log.ConsoleLogger.Debug(System.String,System.Object[])">
            <summary>
            Writes a debug message to the logger
            </summary>
            <param name="format">Format string for the log message.</param>
            <param name="args">Arguments to be inserted into the format string.</param>
        </member>
        <member name="M:EventStore.ClientAPI.Common.Log.ConsoleLogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Writes a debug message to the logger
            </summary>
            <param name="ex">A thrown exception.</param>
            <param name="format">Format string for the log message.</param>
            <param name="args">Arguments to be inserted into the format string.</param>
        </member>
        <member name="M:EventStore.ClientAPI.Common.Log.ConsoleLogger.Info(System.String,System.Object[])">
            <summary>
            Writes an information message to the logger
            </summary>
            <param name="format">Format string for the log message.</param>
            <param name="args">Arguments to be inserted into the format string.</param>
        </member>
        <member name="M:EventStore.ClientAPI.Common.Log.ConsoleLogger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Writes an information message to the logger
            </summary>
            <param name="ex">A thrown exception.</param>
            <param name="format">Format string for the log message.</param>
            <param name="args">Arguments to be inserted into the format string.</param>
        </member>
        <member name="T:EventStore.ClientAPI.ClientClosedEventArgs">
            <summary>
            Event Arguments for the event raised when an <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> is
            disconnected from an Event Store server.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.ClientClosedEventArgs.#ctor(EventStore.ClientAPI.IEventStoreConnection,System.String)">
            <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.ClientClosedEventArgs"/>.
            </summary>
            <param name="connection">The <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> responsible for raising the event.</param>
            <param name="reason">A description of the reason the connection was closed.</param>
        </member>
        <member name="P:EventStore.ClientAPI.ClientClosedEventArgs.Reason">
            <summary>
            A description of the reason the connection was closed if closing was initiated by the server or client API directly
            rather than by calling <see cref="M:EventStore.ClientAPI.IEventStoreConnection.Close"/>.
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.ClientClosedEventArgs.Connection">
            <summary>
            The <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> responsible for raising the event.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.ConnectionSettings">
            <summary>
            A <see cref="T:EventStore.ClientAPI.ConnectionSettings"/> object is an immutable representation of the settings for an
            <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/>. A <see cref="T:EventStore.ClientAPI.ConnectionSettings"/> object can be built using
            a <see cref="T:EventStore.ClientAPI.ConnectionSettingsBuilder"/>, either via the <see cref="M:EventStore.ClientAPI.ConnectionSettings.Create"/> method, or via
            the constructor of <see cref="T:EventStore.ClientAPI.ConnectionSettingsBuilder"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettings.Create">
            <summary>
            Creates a new set of <see cref="T:EventStore.ClientAPI.ConnectionSettings"/>
            </summary>
            <returns>A <see cref="T:EventStore.ClientAPI.ConnectionSettingsBuilder"/> that can be used to build up a <see cref="T:EventStore.ClientAPI.ConnectionSettings"/></returns>
        </member>
        <member name="F:EventStore.ClientAPI.ConnectionSettings.Log">
            <summary>
            The <see cref="T:EventStore.ClientAPI.ILogger"/> that this connection will use
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ConnectionSettings.VerboseLogging">
            <summary>
            Whether or not do excessive logging of <see cref="T:EventStore.ClientAPI.EventStoreConnection"/> internal logic.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ConnectionSettings.MaxQueueSize">
            <summary>
            The maximum number of outstanding items allowed in the queue
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ConnectionSettings.MaxConcurrentItems">
            <summary>
            The maximum number of allowed asynchronous operations to be in process
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ConnectionSettings.MaxRetries">
            <summary>
            The maximum number of retry attempts
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ConnectionSettings.MaxReconnections">
            <summary>
            The maximum number of times to allow for reconnection
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ConnectionSettings.RequireMaster">
            <summary>
            Whether or not to require EventStore to refuse serving read or write request if it is not master
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ConnectionSettings.ReconnectionDelay">
            <summary>
            The amount of time to delay before attempting to reconnect
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ConnectionSettings.OperationTimeout">
            <summary>
            The amount of time before an operation is considered to have timed out
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ConnectionSettings.OperationTimeoutCheckPeriod">
            <summary>
            The amount of time that timeouts are checked in the system.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ConnectionSettings.DefaultUserCredentials">
            <summary>
            The <see cref="T:EventStore.ClientAPI.SystemData.UserCredentials"/> to use for operations where other <see cref="T:EventStore.ClientAPI.SystemData.UserCredentials"/> are not explicitly supplied.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ConnectionSettings.UseSslConnection">
            <summary>
            Whether or not the connection is encrypted using SSL.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ConnectionSettings.TargetHost">
            <summary>
            The host name of the server expected on the SSL certificate.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ConnectionSettings.ValidateServer">
            <summary>
            Whether or not to validate the server SSL certificate.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ConnectionSettings.FailOnNoServerResponse">
            <summary>
            Whether or not to raise an error if no response is received from the server for an operation.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ConnectionSettings.HeartbeatInterval">
            <summary>
            The interval at which to send heartbeat messages.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ConnectionSettings.HeartbeatTimeout">
            <summary>
            The interval after which an unacknowledged heartbeat will cause the connection to be considered faulted and disconnect.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ConnectionSettings.ClientConnectionTimeout">
            <summary>
            The interval after which a client will time out during connection.
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.ConnectionSettings.Default">
            <summary>
            The default <see cref="T:EventStore.ClientAPI.ConnectionSettings"></see>
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.DnsClusterSettingsBuilder">
            <summary>
            Fluent builder used to configure <see cref="T:EventStore.ClientAPI.ClusterSettings"/> for connecting to a cluster
            using DNS discovery.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.DnsClusterSettingsBuilder.SetClusterDns(System.String)">
            <summary>
            Sets the DNS name under which cluster nodes are listed.
            </summary>
            <param name="clusterDns">The DNS name under which cluster nodes are listed.</param>
            <returns>A <see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder"/> for further configuration.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="clusterDns"/> is null or empty.</exception>
        </member>
        <member name="M:EventStore.ClientAPI.DnsClusterSettingsBuilder.SetMaxDiscoverAttempts(System.Int32)">
            <summary>
            Sets the maximum number of attempts for discovery.
            </summary>
            <param name="maxDiscoverAttempts">The maximum number of attempts for DNS discovery.</param>
            <returns>A <see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder"/> for further configuration.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="maxDiscoverAttempts"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:EventStore.ClientAPI.DnsClusterSettingsBuilder.SetGossipTimeout(System.TimeSpan)">
            <summary>
            Sets the period after which gossip times out if none is received.
            </summary>
            <param name="timeout">The period after which gossip times out if none is received.</param>
            <returns>A <see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder"/> for further configuration.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.DnsClusterSettingsBuilder.SetClusterGossipPort(System.Int32)">
            <summary>
            Sets the well-known port on which the cluster gossip is taking place.
            
            If you are using the commercial edition of Event Store HA, with Manager nodes in
            place, this should be the port number of the External HTTP port on which the
            managers are running.
            
            If you are using the open source edition of Event Store HA, this should be the
            External HTTP port that the nodes are running on. If you cannot use a well-known
            port for this across all nodes, you can instead use gossip seed discovery and set
            the <see cref="T:System.Net.IPEndPoint"/> of some seed nodes instead.
            </summary>
            <param name="clusterGossipPort">The cluster gossip port.</param>
            <returns>A <see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder"/> for further configuration.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.DnsClusterSettingsBuilder.op_Implicit(EventStore.ClientAPI.DnsClusterSettingsBuilder)~EventStore.ClientAPI.ClusterSettings">
            <summary>
            Builds a <see cref="T:EventStore.ClientAPI.ClusterSettings"/> object from a <see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder"/>.
            </summary>
            <param name="builder"><see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder"/> from which to build a <see cref="T:EventStore.ClientAPI.ClusterSettings"/></param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.DnsClusterSettingsBuilder.Build">
            <summary>
            Builds a <see cref="T:EventStore.ClientAPI.ClusterSettings"/> object from a <see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder"/>.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder">
            <summary>
            Fluent builder used to configure <see cref="T:EventStore.ClientAPI.ClusterSettings"/> for connecting to a cluster
            using gossip seeds.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder.SetGossipSeedEndPoints(System.Net.IPEndPoint[])">
            <summary>
            Sets gossip seed endpoints for the client.
            
            If the server requires a specific Host header to be sent as part of the gossip
            request, use the overload of this method taking <see cref="T:EventStore.ClientAPI.GossipSeed"/> instead.
            </summary>
            <param name="gossipSeeds"><see cref="T:System.Net.IPEndPoint"/>s representing the endpoints of nodes from which to seed gossip.</param>
            <returns>A <see cref="T:EventStore.ClientAPI.ClusterSettingsBuilder"/> for further configuration.</returns>
            <exception cref="T:System.ArgumentException">If no gossip seeds are specified.</exception>
        </member>
        <member name="M:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder.SetGossipSeedEndPoints(EventStore.ClientAPI.GossipSeed[])">
            <summary>
            Sets gossip seed endpoints for the client.
            </summary>
            <param name="gossipSeeds"><see cref="T:EventStore.ClientAPI.GossipSeed"/>s representing the endpoints of nodes from which to seed gossip.</param>
            <returns>A <see cref="T:EventStore.ClientAPI.ClusterSettingsBuilder"/> for further configuration.</returns>
            <exception cref="T:System.ArgumentException">If no gossip seeds are specified.</exception>
        </member>
        <member name="M:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder.SetMaxDiscoverAttempts(System.Int32)">
            <summary>
            Sets the maximum number of attempts for discovery.
            </summary>
            <param name="maxDiscoverAttempts">The maximum number of attempts for DNS discovery.</param>
            <returns>A <see cref="T:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder"/> for further configuration.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="maxDiscoverAttempts"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder.SetGossipTimeout(System.TimeSpan)">
            <summary>
            Sets the period after which gossip times out if none is received.
            </summary>
            <param name="timeout">The period after which gossip times out if none is received.</param>
            <returns>A <see cref="T:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder"/> for further configuration.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder.op_Implicit(EventStore.ClientAPI.GossipSeedClusterSettingsBuilder)~EventStore.ClientAPI.ClusterSettings">
            <summary>
            Builds a <see cref="T:EventStore.ClientAPI.ClusterSettings"/> object from a <see cref="T:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder"/>.
            </summary>
            <param name="builder"><see cref="T:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder"/> from which to build a <see cref="T:EventStore.ClientAPI.ClusterSettings"/></param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder.Build">
            <summary>
            Builds a <see cref="T:EventStore.ClientAPI.ClusterSettings"/> object from a <see cref="T:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder"/>.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.ConnectionSettingsBuilder">
            <summary>
            Used to build a connection settings (fluent API)
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomLogger(EventStore.ClientAPI.ILogger)">
            <summary>
            Configures the connection to output log messages to the given <see cref="T:EventStore.ClientAPI.ILogger"/>.
            </summary>
            <param name="logger">The <see cref="T:EventStore.ClientAPI.ILogger"/> to use.</param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseConsoleLogger">
            <summary>
            Configures the connection to output log messages to the console.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseDebugLogger">
            <summary>
            Configures the connection to output log messages to the listeners
            configured on <see cref="T:System.Diagnostics.Debug"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.EnableVerboseLogging">
            <summary>
            Turns on verbose <see cref="T:EventStore.ClientAPI.EventStoreConnection"/> internal logic logging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitOperationsQueueTo(System.Int32)">
            <summary>
            Sets the limit for number of outstanding operations
            </summary>
            <param name="limit">The new limit of outstanding operations</param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitConcurrentOperationsTo(System.Int32)">
            <summary>
            Limits the number of concurrent operations that this connection can have
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitAttemptsForOperationTo(System.Int32)">
            <summary>
            Limits the number of operation attempts
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo(System.Int32)">
            <summary>
            Limits the number of operation retries
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying">
            <summary>
            Allows infinite operation retry attempts
            </summary>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitReconnectionsTo(System.Int32)">
            <summary>
            Limits the number of reconnections this connection can try to make
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.KeepReconnecting">
            <summary>
            Allows infinite reconnection attempts
            </summary>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnMasterOnly">
            <summary>
            Requires all write and read requests to be served only by master (cluster version only) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnAnyNode">
            <summary>
            Allow for writes to be forwarded and read requests served locally if node is not master (cluster version only) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetReconnectionDelayTo(System.TimeSpan)">
            <summary>
            Sets the delay between reconnection attempts
            </summary>
            <param name="reconnectionDelay"></param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetOperationTimeoutTo(System.TimeSpan)">
            <summary>
            Sets the operation timeout duration
            </summary>
            <param name="operationTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo(System.TimeSpan)">
            <summary>
            Sets how often timeouts should be checked for.
            </summary>
            <param name="timeoutCheckPeriod"></param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetDefaultUserCredentials(EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Sets the default <see cref="T:EventStore.ClientAPI.SystemData.UserCredentials"/> to be used for this connection.
            If user credentials are not given for an operation, these credentials will be used.
            </summary>
            <param name="userCredentials"></param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseSslConnection(System.String,System.Boolean)">
            <summary>
            Uses a SSL connection over TCP. This should generally be used with authentication.
            </summary>
            <param name="targetHost">HostName of server certificate.</param>
            <param name="validateServer">Whether to accept connection from server with not trusted certificate.</param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.FailOnNoServerResponse">
            <summary>
            Marks that no response from server should cause an error on the request
            </summary>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatInterval(System.TimeSpan)">
            <summary>
            Sets how often heartbeats should be expected on the connection (lower values detect broken sockets faster)
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatTimeout(System.TimeSpan)">
            <summary>
            Sets how long to wait without heartbeats before determining a connection to be dead (must be longer than heartbeat interval)
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.WithConnectionTimeoutOf(System.TimeSpan)">
            <summary>
            Sets the timeout for attempting to connect to a server before aborting and attempting a reconnect.
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.op_Implicit(EventStore.ClientAPI.ConnectionSettingsBuilder)~EventStore.ClientAPI.ConnectionSettings">
            <summary>
            Convert the mutable <see cref="T:EventStore.ClientAPI.ConnectionSettingsBuilder"/> object to an immutable
            <see cref="T:EventStore.ClientAPI.ConnectionSettings"/> object.
            </summary>
            <param name="builder">The <see cref="T:EventStore.ClientAPI.ConnectionSettingsBuilder"/> to convert.</param>
            <returns>An immutable <see cref="T:EventStore.ClientAPI.ConnectionSettings"/> object with the values specified by the builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.Build">
            <summary>
            Convert the mutable <see cref="T:EventStore.ClientAPI.ConnectionSettingsBuilder"/> object to an immutable
            <see cref="T:EventStore.ClientAPI.ConnectionSettings"/> object.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.ClusterSettings">
            <summary>
            Contains settings relating to a connection to a cluster. 
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.ClusterSettings.Create">
            <summary>
            Creates a new set of <see cref="T:EventStore.ClientAPI.ClusterSettings"/>
            </summary>
            <returns>A <see cref="T:EventStore.ClientAPI.ClusterSettingsBuilder"/> that can be used to build up a <see cref="T:EventStore.ClientAPI.ClusterSettings"/></returns>
        </member>
        <member name="F:EventStore.ClientAPI.ClusterSettings.ClusterDns">
            <summary>
            The DNS name to use for discovering endpoints.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ClusterSettings.MaxDiscoverAttempts">
            <summary>
            The maximum number of attempts for discovering endpoints.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ClusterSettings.ExternalGossipPort">
            <summary>
            The well-known endpoint on which cluster managers are running.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ClusterSettings.GossipSeeds">
            <summary>
            Endpoints for seeding gossip if not using DNS.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ClusterSettings.GossipTimeout">
            <summary>
            Timeout for cluster gossip.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.ClusterSettings.#ctor(EventStore.ClientAPI.GossipSeed[],System.Int32,System.TimeSpan)">
            <summary>
            Used if we're connecting with gossip seeds
            </summary>
            <param name="gossipSeeds">Endpoints for seeding gossip</param>
            <param name="maxDiscoverAttempts">Maximum number of attempts to discover the cluster</param>
            <param name="gossipTimeout">Timeout for cluster gossip</param>
        </member>
        <member name="M:EventStore.ClientAPI.ClusterSettings.#ctor(System.String,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Used if we're discovering via DNS
            </summary>
            <param name="clusterDns">The DNS name to use for discovering endpoints</param>
            <param name="maxDiscoverAttempts">The maximum number of attempts for discovering endpoints</param>
            <param name="externalGossipPort">The well-known endpoint on which cluster managers are running</param>
            <param name="gossipTimeout">Timeout for cluster gossip</param>
        </member>
        <member name="T:EventStore.ClientAPI.ClusterSettingsBuilder">
            <summary>
            Builder used for creating instances of ClusterSettings.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.ClusterSettingsBuilder.DiscoverClusterViaDns">
            <summary>
            Sets the client to discover nodes using a DNS name and a well-known port.
            </summary>
            <returns>A <see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder"/> for further configuration.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.ClusterSettingsBuilder.DiscoverClusterViaGossipSeeds">
            <summary>
            Sets the client to discover cluster nodes by specifying the IP endpoints of
            one or more of the nodes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EventStore.ClientAPI.ClientConnectionEventArgs">
            <summary>
            Event Arguments for the event raised when an <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> is
            connected to or disconnected from an Event Store server.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.ClientConnectionEventArgs.#ctor(EventStore.ClientAPI.IEventStoreConnection,System.Net.IPEndPoint)">
            <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.ClientConnectionEventArgs"/>.
            </summary>
            <param name="connection">The <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> responsible for raising the event.</param>
            <param name="remoteEndPoint">The endpoint of the Event Store server to or from which the connection was connected or disconnected.</param>
        </member>
        <member name="P:EventStore.ClientAPI.ClientConnectionEventArgs.RemoteEndPoint">
            <summary>
            The endpoint of the Event Store server to or from which the connection was connected or disconnected.
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.ClientConnectionEventArgs.Connection">
            <summary>
            The <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> responsible for raising the event.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.EventReadStatus">
            <summary>
            Enumeration representing the status of a single event read operation.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventReadStatus.Success">
            <summary>
            The read operation was successful.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventReadStatus.NotFound">
            <summary>
            The event was not found.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventReadStatus.NoStream">
            <summary>
            The stream was not found.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventReadStatus.StreamDeleted">
            <summary>
            The stream previously existed but was deleted.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.Exceptions.ProjectionCommandConflictException">
            <summary>
            Exception thrown if a projection command fails.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException">
            <summary>
            Exception thrown if a projection command fails.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.Exceptions.EventStoreConnectionException">
            <summary>
            Base type for exceptions thrown by an <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/>,
            thrown in circumstances which don't have a specific derived exception.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.EventStoreConnectionException.#ctor">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.EventStoreConnectionException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.EventStoreConnectionException.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.EventStoreConnectionException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.EventStoreConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.EventStoreConnectionException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.EventStoreConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.EventStoreConnectionException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException.#ctor">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ProjectionCommandConflictException.#ctor">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ProjectionCommandConflictException.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ProjectionCommandConflictException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ProjectionCommandConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException"/>.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.RawStreamMetadataResult">
            <summary>
            Represents stream metadata as a series of properties for system
            data and a byte array for user metadata.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.RawStreamMetadataResult.Stream">
            <summary>
            The name of the stream.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.RawStreamMetadataResult.IsStreamDeleted">
            <summary>
            True if the stream is soft-deleted.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.RawStreamMetadataResult.MetastreamVersion">
            <summary>
            The version of the metadata format.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.RawStreamMetadataResult.StreamMetadata">
            <summary>
            A byte array containing user-specified metadata.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.RawStreamMetadataResult.#ctor(System.String,System.Boolean,System.Int32,System.Byte[])">
            <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.RawStreamMetadataResult"/>.
            </summary>
            <param name="stream">The name of the stream.</param>
            <param name="isStreamDeleted">True if the stream is soft-deleted.</param>
            <param name="metastreamVersion">The version of the metadata format.</param>
            <param name="streamMetadata">A byte array containing user-specified metadata.</param>
        </member>
        <member name="T:EventStore.ClientAPI.StreamMetadataBuilder">
            <summary>
            Builder for <see cref="T:EventStore.ClientAPI.StreamMetadata"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.op_Implicit(EventStore.ClientAPI.StreamMetadataBuilder)~EventStore.ClientAPI.StreamMetadata">
            <summary>
            Builds a <see cref="T:EventStore.ClientAPI.StreamMetadata"/> from a <see cref="T:EventStore.ClientAPI.StreamMetadataBuilder"/>.
            </summary>
            <param name="builder">A <see cref="T:EventStore.ClientAPI.StreamMetadataBuilder"/>.</param>
            <returns>A <see cref="T:EventStore.ClientAPI.StreamMetadata"/>.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.Build">
            <summary>
            Builds a <see cref="T:EventStore.ClientAPI.StreamMetadata"/> from a <see cref="T:EventStore.ClientAPI.StreamMetadataBuilder"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetMaxCount(System.Int32)">
            <summary>
            Sets the maximum number of events allowed in the stream.
            </summary>
            <param name="maxCount">The maximum number of events allowed in the stream.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetMaxAge(System.TimeSpan)">
            <summary>
            Sets the maximum age of events allowed in the stream.
            </summary>
            <param name="maxAge">The maximum age of events allowed in the stream.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetTruncateBefore(System.Int32)">
            <summary>
            Sets the event number from which previous events can be scavenged.
            </summary>
            <param name="truncateBefore">The event number from which previous events can be scavenged.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCacheControl(System.TimeSpan)">
            <summary>
            Sets the amount of time for which the stream head is cachable.
            </summary>
            <param name="cacheControl">The amount of time for which the stream head is cachable.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetReadRole(System.String)">
            <summary>
            Sets a single role name with read permission for the stream.
            </summary>
            <param name="role">Role name.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetReadRoles(System.String[])">
            <summary>
            Sets role names with read permission for the stream.
            </summary>
            <param name="roles">Role names.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetWriteRole(System.String)">
            <summary>
            Sets a single role name with write permission for the stream.
            </summary>
            <param name="role">Role name.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetWriteRoles(System.String[])">
            <summary>
            Sets role names with write permission for the stream.
            </summary>
            <param name="roles">Role names.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetDeleteRole(System.String)">
            <summary>
            Sets a single role name with delete permission for the stream.
            </summary>
            <param name="role">Role name.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetDeleteRoles(System.String[])">
            <summary>
            Sets role names with delete permission for the stream.
            </summary>
            <param name="roles">Role names.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetMetadataReadRole(System.String)">
            <summary>
            Sets a single role name with metadata read permission for the stream.
            </summary>
            <param name="role">Role name.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetMetadataReadRoles(System.String[])">
            <summary>
            Sets role names with metadata read permission for the stream.
            </summary>
            <param name="roles">Role names.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetMetadataWriteRole(System.String)">
            <summary>
            Sets a single role name with metadata write permission for the stream.
            </summary>
            <param name="role">Role name.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetMetadataWriteRoles(System.String[])">
            <summary>
            Sets role names with metadata write permission for the stream.
            </summary>
            <param name="roles">Role names.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.String)">
            <summary>
            Sets a custom metadata property.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Int32)">
            <summary>
            Sets a custom metadata property.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Nullable{System.Int32})">
            <summary>
            Sets a custom metadata property.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Int64)">
            <summary>
            Sets a custom metadata property.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Nullable{System.Int64})">
            <summary>
            Sets a custom metadata property.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Single)">
            <summary>
            Sets a custom metadata property.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Nullable{System.Single})">
            <summary>
            Sets a custom metadata property.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Double)">
            <summary>
            Sets a custom metadata property.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Nullable{System.Double})">
            <summary>
            Sets a custom metadata property.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Decimal)">
            <summary>
            Sets a custom metadata property.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Nullable{System.Decimal})">
            <summary>
            Sets a custom metadata property.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Boolean)">
            <summary>
            Sets a custom metadata property.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Nullable{System.Boolean})">
            <summary>
            Sets a custom metadata property.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomPropertyWithValueAsRawJsonString(System.String,System.String)">
            <summary>
            Sets a custom metadata property to a string of raw JSON.
            </summary>
            <param name="key">The key.</param>
            <param name="rawJson">The value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="T:EventStore.ClientAPI.StreamMetadataResult">
            <summary>
            Represents stream metadata as a series of properties for system
            data and a <see cref="F:EventStore.ClientAPI.StreamMetadataResult.StreamMetadata"/> object for user metadata.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamMetadataResult.Stream">
            <summary>
            The name of the stream.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamMetadataResult.IsStreamDeleted">
            <summary>
            True if the stream is soft-deleted.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamMetadataResult.MetastreamVersion">
            <summary>
            The version of the metadata format.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamMetadataResult.StreamMetadata">
            <summary>
            A <see cref="F:EventStore.ClientAPI.StreamMetadataResult.StreamMetadata"/> containing user-specified metadata.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadataResult.#ctor(System.String,System.Boolean,System.Int32,EventStore.ClientAPI.StreamMetadata)">
            <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.StreamMetadataResult"/>.
            </summary>
            <param name="stream">The name of the stream.</param>
            <param name="isStreamDeleted">True if the stream is soft-deleted.</param>
            <param name="metastreamVersion">The version of the metadata format.</param>
            <param name="streamMetadata">A <see cref="T:EventStore.ClientAPI.StreamMetadataResult"/> containing user-specified metadata.</param>
        </member>
        <member name="T:EventStore.ClientAPI.WriteResult">
            <summary>
            Result type returned after writing to a stream.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.WriteResult.NextExpectedVersion">
            <summary>
            The next expected version for the stream.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.WriteResult.LogPosition">
            <summary>
            The <see cref="F:EventStore.ClientAPI.WriteResult.LogPosition"/> of the write.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.WriteResult.#ctor(System.Int32,EventStore.ClientAPI.Position)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.WriteResult"/>.
            </summary>
            <param name="nextExpectedVersion">The next expected version for the stream.</param>
            <param name="logPosition">The position of the write in the log</param>
        </member>
        <member name="T:EventStore.ClientAPI.DeleteResult">
            <summary>
            Result type returned after deleting a stream.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.DeleteResult.LogPosition">
            <summary>
            The <see cref="F:EventStore.ClientAPI.DeleteResult.LogPosition"/> of the write.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.DeleteResult.#ctor(EventStore.ClientAPI.Position)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.DeleteResult"/>.
            </summary>
            <param name="logPosition">The position of the write in the log</param>
        </member>
        <member name="T:EventStore.ClientAPI.SystemSettings">
            <summary>
            Represents global settings for an Event Store server.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.SystemSettings.UserStreamAcl">
            <summary>
            Default access control list for new user streams.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.SystemSettings.SystemStreamAcl">
            <summary>
            Default access control list for new system streams.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.SystemSettings.#ctor(EventStore.ClientAPI.StreamAcl,EventStore.ClientAPI.StreamAcl)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.SystemSettings"/>.
            </summary>
            <param name="userStreamAcl"></param>
            <param name="systemStreamAcl"></param>
        </member>
        <member name="M:EventStore.ClientAPI.SystemSettings.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:EventStore.ClientAPI.SystemSettings.FromJsonBytes(System.Byte[])">
            <summary>
            Creates a <see cref="T:EventStore.ClientAPI.SystemSettings"/> object from a JSON string
            in a byte array.
            </summary>
            <param name="json">Byte array containing a JSON string.</param>
            <returns>A <see cref="T:EventStore.ClientAPI.SystemSettings"/> object.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.SystemSettings.ToJsonBytes">
            <summary>
            Creates a byte array containing a UTF-8 string with no byte order
            mark representing this <see cref="T:EventStore.ClientAPI.SystemSettings"/> object.
            </summary>
            <returns>A byte array containing a UTF-8 string with no byte order mark.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.SystemSettings.ToJsonString">
            <summary>
            Creates a string containing representing this <see cref="T:EventStore.ClientAPI.SystemSettings"/>
            object.
            </summary>
            <returns>A string representing this <see cref="T:EventStore.ClientAPI.SystemSettings"/>.</returns>
        </member>
        <member name="T:EventStore.ClientAPI.EventReadResult">
            <summary>
            A Event Read Result is the result of a single event read operation to the event store.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventReadResult.Status">
            <summary>
            The <see cref="T:EventStore.ClientAPI.EventReadStatus"/> representing the status of this read attempt
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventReadResult.Stream">
            <summary>
            The name of the stream read
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventReadResult.EventNumber">
            <summary>
            The event number of the requested event.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventReadResult.Event">
            <summary>
            The event read represented as <see cref="T:EventStore.ClientAPI.ResolvedEvent"/>
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.EventStoreNodeConnection">
            <summary>
            Maintains a full duplex connection to the EventStore
            </summary>
            <remarks>
            An <see cref="T:EventStore.ClientAPI.EventStoreConnection"/> operates quite differently than say a <see cref="T:System.Data.SqlClient.SqlConnection"/>. Normally
            when using an <see cref="T:EventStore.ClientAPI.EventStoreConnection"/> you want to keep the connection open for a much longer of time than 
            when you use a SqlConnection. If you prefer the usage pattern of using(new Connection()) .. then you would likely
            want to create a FlyWeight on top of the <see cref="T:EventStore.ClientAPI.EventStoreConnection"/>.
            
            Another difference is that with the <see cref="T:EventStore.ClientAPI.EventStoreConnection"/> all operations are handled in a full async manner
            (even if you call the synchronous behaviors). Many threads can use an <see cref="T:EventStore.ClientAPI.EventStoreConnection"/> at the same
            time or a single thread can make many asynchronous requests. To get the most performance out of the connection
            it is generally recommended to use it in this way.
            </remarks>
        </member>
        <member name="T:EventStore.ClientAPI.IEventStoreConnection">
            <summary>
            Maintains a full duplex connection to the EventStore
            </summary>
            <remarks>
            An <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> operates quite differently than say a <see cref="T:System.Data.SqlClient.SqlConnection"/>. Normally
            when using an <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> you want to keep the connection open for a much longer of time than 
            when you use a SqlConnection. If you prefer the usage pattern of using(new Connection()) .. then you would likely
            want to create a FlyWeight on top of the <see cref="T:EventStore.ClientAPI.EventStoreConnection"/>.
            
            Another difference is that with the <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> all operations are handled in a full async manner
            (even if you call the synchronous behaviors). Many threads can use an <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> at the same
            time or a single thread can make many asynchronous requests. To get the most performance out of the connection
            it is generally recommended to use it in this way.
            </remarks>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.ConnectAsync">
            <summary>
            Connects the <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> asynchronously to a destination
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that can be waited upon.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.Close">
            <summary>
            Closes this <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/>
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.DeleteStreamAsync(System.String,System.Int32,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Deletes a stream from the Event Store asynchronously
            </summary>
            <param name="stream">The name of the stream to delete.</param>
            <param name="expectedVersion">The expected version that the streams should have when being deleted. <see cref="T:EventStore.ClientAPI.ExpectedVersion"/></param>
            <param name="userCredentials">The optional user credentials to perform operation with.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that can be awaited upon by the caller.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.DeleteStreamAsync(System.String,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Deletes a stream from the Event Store asynchronously
            </summary>
            <param name="stream">The name of the stream to delete.</param>
            <param name="expectedVersion">The expected version that the streams should have when being deleted. <see cref="T:EventStore.ClientAPI.ExpectedVersion"/></param>
            <param name="hardDelete">Indicator for tombstoning vs soft-deleting the stream. Tombstoned streams can never be recreated. Soft-deleted streams
            can be written to again, but the EventNumber sequence will not start from 0.</param>
            <param name="userCredentials">The optional user credentials to perform operation with.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that can be awaited upon by the caller.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String,System.Int32,EventStore.ClientAPI.EventData[])">
            <summary>
            Appends Events asynchronously to a stream.
            </summary>
            <remarks>
            When appending events to a stream the <see cref="T:EventStore.ClientAPI.ExpectedVersion"/> choice can
            make a very large difference in the observed behavior. For example, if no stream exists
            and ExpectedVersion.Any is used, a new stream will be implicitly created when appending.
            
            There are also differences in idempotency between different types of calls.
            If you specify an ExpectedVersion aside from ExpectedVersion.Any the Event Store
            will give you an idempotency guarantee. If using ExpectedVersion.Any the Event Store
            will do its best to provide idempotency but does not guarantee idempotency
            </remarks>
            <param name="stream">The name of the stream to append events to</param>
            <param name="expectedVersion">The <see cref="T:EventStore.ClientAPI.ExpectedVersion"/> of the stream to append to</param>
            <param name="events">The events to append to the stream</param>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String,System.Int32,EventStore.ClientAPI.SystemData.UserCredentials,EventStore.ClientAPI.EventData[])">
            <summary>
            Appends Events asynchronously to a stream.
            </summary>
            <remarks>
            When appending events to a stream the <see cref="T:EventStore.ClientAPI.ExpectedVersion"/> choice can
            make a very large difference in the observed behavior. For example, if no stream exists
            and ExpectedVersion.Any is used, a new stream will be implicitly created when appending.
            
            There are also differences in idempotency between different types of calls.
            If you specify an ExpectedVersion aside from ExpectedVersion.Any the Event Store
            will give you an idempotency guarantee. If using ExpectedVersion.Any the Event Store
            will do its best to provide idempotency but does not guarantee idempotency
            </remarks>
            <param name="stream">The name of the stream to append events to</param>
            <param name="expectedVersion">The <see cref="T:EventStore.ClientAPI.ExpectedVersion"/> of the stream to append to</param>
            <param name="userCredentials">The optional user credentials to perform operation with.</param>
            <param name="events">The events to append to the stream</param>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String,System.Int32,System.Collections.Generic.IEnumerable{EventStore.ClientAPI.EventData},EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Appends Events asynchronously to a stream.
            </summary>
            <remarks>
            When appending events to a stream the <see cref="T:EventStore.ClientAPI.ExpectedVersion"/> choice can
            make a very large difference in the observed behavior. For example, if no stream exists
            and ExpectedVersion.Any is used, a new stream will be implicitly created when appending.
            
            There are also differences in idempotency between different types of calls.
            If you specify an ExpectedVersion aside from ExpectedVersion.Any the Event Store
            will give you an idempotency guarantee. If using ExpectedVersion.Any the Event Store
            will do its best to provide idempotency but does not guarantee idempotency
            </remarks>
            <param name="stream">The name of the stream to append events to</param>
            <param name="expectedVersion">The <see cref="T:EventStore.ClientAPI.ExpectedVersion"/> of the stream to append to</param>
            <param name="events">The events to append to the stream</param>
            <param name="userCredentials">The optional user credentials to perform operation with.</param>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.StartTransactionAsync(System.String,System.Int32,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Starts a transaction in the event store on a given stream asynchronously
            </summary>
            <remarks>
            A <see cref="T:EventStore.ClientAPI.EventStoreTransaction"/> allows the calling of multiple writes with multiple
            round trips over long periods of time between the caller and the event store. This method
            is only available through the TCP interface and no equivalent exists for the RESTful interface.
            </remarks>
            <param name="stream">The stream to start a transaction on</param>
            <param name="expectedVersion">The expected version of the stream at the time of starting the transaction</param>
            <param name="userCredentials">The optional user credentials to perform operation with.</param>
            <returns>A task the caller can use to control the operation.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.ContinueTransaction(System.Int64,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Continues transaction by provided transaction ID.
            </summary>
            <remarks>
            A <see cref="T:EventStore.ClientAPI.EventStoreTransaction"/> allows the calling of multiple writes with multiple
            round trips over long periods of time between the caller and the event store. This method
            is only available through the TCP interface and no equivalent exists for the RESTful interface.
            </remarks>
            <param name="transactionId">The transaction ID that needs to be continued.</param>
            <param name="userCredentials">The optional user credentials to perform operation with.</param>
            <returns><see cref="T:EventStore.ClientAPI.EventStoreTransaction"/> object.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.ReadEventAsync(System.String,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously reads a single event from a stream.
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="eventNumber">The event number to read, <see cref="T:EventStore.ClientAPI.StreamPosition">StreamPosition.End</see> to read the last event in the stream</param>
            <param name="resolveLinkTos">Whether to resolve LinkTo events automatically</param>
            <param name="userCredentials">The optional user credentials to perform operation with.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> containing the results of the read operation</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsForwardAsync(System.String,System.Int32,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Reads count Events from an Event Stream forwards (e.g. oldest to newest) starting from position start 
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="start">The starting point to read from</param>
            <param name="count">The count of items to read</param>
            <param name="resolveLinkTos">Whether to resolve LinkTo events automatically</param>
            <param name="userCredentials">The optional user credentials to perform operation with.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> containing the results of the read operation</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsBackwardAsync(System.String,System.Int32,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Reads count events from an Event Stream backwards (e.g. newest to oldest) from position asynchronously
            </summary>
            <param name="stream">The Event Stream to read from</param>
            <param name="start">The position to start reading from</param>
            <param name="count">The count to read from the position</param>
            <param name="resolveLinkTos">Whether to resolve LinkTo events automatically</param>
            <param name="userCredentials">The optional user credentials to perform operation with.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/> containing the results of the read operation</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsForwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Reads All Events in the node forward asynchronously (e.g. beginning to end)
            </summary>
            <param name="position">The position to start reading from</param>
            <param name="maxCount">The maximum count to read</param>
            <param name="resolveLinkTos">Whether to resolve LinkTo events automatically</param>
            <param name="userCredentials">The optional user credentials to perform operation with.</param>
            <returns>A <see cref="T:EventStore.ClientAPI.AllEventsSlice"/> containing the records read</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsBackwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Reads All Events in the node backwards (e.g. end to beginning)
            </summary>
            <param name="position">The position to start reading from</param>
            <param name="maxCount">The maximum count to read</param>
            <param name="resolveLinkTos">Whether to resolve Link events automatically</param>
            <param name="userCredentials">The optional user credentials to perform operation with.</param>
            <returns>A <see cref="T:EventStore.ClientAPI.AllEventsSlice"/> containing the records read</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamAsync(System.String,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously subscribes to a single event stream. New events 
            written to the stream while the subscription is active will be
            pushed to the client.
            </summary>
            <param name="stream">The stream to subscribe to</param>
            <param name="resolveLinkTos">Whether to resolve Link events automatically</param>
            <param name="eventAppeared">An action invoked when a new event is received over the subscription</param>
            <param name="subscriptionDropped">An action invoked if the subscription is dropped</param>
            <param name="userCredentials">User credentials to use for the operation</param>
            <returns>An <see cref="T:EventStore.ClientAPI.EventStoreSubscription"/> representing the subscription</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamFrom(System.String,System.Nullable{System.Int32},System.Boolean,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32)">
            <summary>
            Subscribes to a single event stream. Existing events from
            lastCheckpoint onwards are read from the stream
            and presented to the user of <see cref="T:EventStore.ClientAPI.EventStoreCatchUpSubscription"/>
            as if they had been pushed.
            
            Once the end of the stream is read the subscription is
            transparently (to the user) switched to push new events as
            they are written.
            
            The action liveProcessingStarted is called when the
            <see cref="T:EventStore.ClientAPI.EventStoreCatchUpSubscription"/> switches from the reading
            phase to the live subscription phase.
            </summary>
            <param name="stream">The stream to subscribe to</param>
            <param name="lastCheckpoint">The event number from which to start.
            
            To receive all events in the stream, use <see cref="F:EventStore.ClientAPI.StreamCheckpoint.StreamStart"/>.
            If events have already been received and resubscription from the same point
            is desired, use the event number of the last event processed which
            appeared on the subscription.
            
            NOTE: Using <see cref="F:EventStore.ClientAPI.StreamPosition.Start"/> here will result in missing
            the first event in the stream.</param>
            <param name="resolveLinkTos">Whether to resolve Link events automatically</param>
            <param name="eventAppeared">An action invoked when an event is received over the subscription</param>
            <param name="liveProcessingStarted">An action invoked when the subscription switches to newly-pushed events</param>
            <param name="subscriptionDropped">An action invoked if the subscription is dropped</param>
            <param name="userCredentials">User credentials to use for the operation</param>
            <param name="readBatchSize">The batch size to use during the read phase</param>
            <returns>An <see cref="T:EventStore.ClientAPI.EventStoreSubscription"/> representing the subscription</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllAsync(System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously subscribes to all events in the Event Store. New
            events written to the stream while the subscription is active
            will be pushed to the client.
            </summary>
            <param name="resolveLinkTos">Whether to resolve Link events automatically</param>
            <param name="eventAppeared">An action invoked when a new event is received over the subscription</param>
            <param name="subscriptionDropped">An action invoked if the subscription is dropped</param>
            <param name="userCredentials">User credentials to use for the operation</param>
            <returns>An <see cref="T:EventStore.ClientAPI.EventStoreSubscription"/> representing the subscription</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscription(System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Subscribes a persistent subscription (competing consumer) to the event store
            </summary>
            <param name="groupName">The subscription group to connect to</param>
            <param name="stream">The stream to subscribe to</param>
            <param name="eventAppeared">An action invoked when an event appears</param>
            <param name="subscriptionDropped">An action invoked if the subscription is dropped</param>
            <param name="userCredentials">User credentials to use for the operation</param>
            <param name="bufferSize">The buffer size to use for the persistent subscription</param>
            <param name="autoAck">Whether the subscription should automatically acknowledge messages processed.
            If not set the receiver is required to explicitly acknowledge messages through the subscription.</param>
            <remarks>This will connect you to a persistent subscription group for a stream. The subscription group
            must first be created with CreatePersistentSubscriptionGroup many connections
            can connect to the same group and they will be treated as competing consumers within the group.
            If one connection dies work will be balanced across the rest of the consumers in the group. If
            you attempt to connect to a group that does not exist you will be given an exception.
            </remarks>
            <returns>An <see cref="T:EventStore.ClientAPI.EventStoreSubscription"/> representing the subscription</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},System.Boolean,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32)">
            <summary>
            Subscribes to a all events. Existing events from lastCheckpoint
            onwards are read from the Event Store and presented to the user of
            <see cref="T:EventStore.ClientAPI.EventStoreCatchUpSubscription"/> as if they had been pushed.
            
            Once the end of the stream is read the subscription is
            transparently (to the user) switched to push new events as
            they are written.
            
            The action liveProcessingStarted is called when the
            <see cref="T:EventStore.ClientAPI.EventStoreCatchUpSubscription"/> switches from the reading
            phase to the live subscription phase.
            </summary>
            <param name="lastCheckpoint">The position from which to start.
            
            To receive all events in the database, use <see cref="F:EventStore.ClientAPI.AllCheckpoint.AllStart"/>.
            If events have already been received and resubscription from the same point
            is desired, use the position representing the last event processed which
            appeared on the subscription.
            
            NOTE: Using <see cref="F:EventStore.ClientAPI.Position.Start"/> here will result in missing
            the first event in the stream.</param>
            <param name="resolveLinkTos">Whether to resolve Link events automatically</param>
            <param name="eventAppeared">An action invoked when an event is received over the subscription</param>
            <param name="liveProcessingStarted">An action invoked when the subscription switches to newly-pushed events</param>
            <param name="subscriptionDropped">An action invoked if the subscription is dropped</param>
            <param name="userCredentials">User credentials to use for the operation</param>
            <param name="readBatchSize">The batch size to use during the read phase</param>
            <returns>An <see cref="T:EventStore.ClientAPI.EventStoreSubscription"/> representing the subscription</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.UpdatePersistentSubscriptionAsync(System.String,System.String,EventStore.ClientAPI.PersistentSubscriptionSettings,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously update a persistent subscription group on a stream
            </summary>
            <param name="stream">The name of the stream to create the persistent subscription on</param>
            <param name="groupName">The name of the group to create</param>
            <param name="settings">The <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettings"></see> for the subscription</param>
            <param name="credentials">The credentials to be used for this operation.</param>
            <returns>A <see cref="T:EventStore.ClientAPI.PersistentSubscriptionCreateResult"/>.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.CreatePersistentSubscriptionAsync(System.String,System.String,EventStore.ClientAPI.PersistentSubscriptionSettings,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously create a persistent subscription group on a stream
            </summary>
            <param name="stream">The name of the stream to create the persistent subscription on</param>
            <param name="groupName">The name of the group to create</param>
            <param name="settings">The <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettings"></see> for the subscription</param>
            <param name="credentials">The credentials to be used for this operation.</param>
            <returns>A <see cref="T:EventStore.ClientAPI.PersistentSubscriptionCreateResult"/>.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.DeletePersistentSubscriptionAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously delete a persistent subscription group on a stream
            </summary>
            <param name="stream">The name of the stream to delete the persistent subscription on</param>
            <param name="groupName">The name of the group to delete</param>
            <param name="userCredentials">User credentials to use for the operation</param>
            <returns>A <see cref="T:EventStore.ClientAPI.PersistentSubscriptionDeleteResult"/>.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.SetStreamMetadataAsync(System.String,System.Int32,EventStore.ClientAPI.StreamMetadata,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously sets the metadata for a stream.
            </summary>
            <param name="stream">The name of the stream for which to set metadata.</param>
            <param name="expectedMetastreamVersion">The expected version for the write to the metadata stream.</param>
            <param name="metadata">A <see cref="T:EventStore.ClientAPI.StreamMetadata"/> representing the new metadata.</param>
            <param name="userCredentials">User credentials to use for the operation</param>
            <returns>A <see cref="T:EventStore.ClientAPI.WriteResult"/>.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.SetStreamMetadataAsync(System.String,System.Int32,System.Byte[],EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously sets the metadata for a stream.
            </summary>
            <param name="stream">The name of the stream for which to set metadata.</param>
            <param name="expectedMetastreamVersion">The expected version for the write to the metadata stream.</param>
            <param name="metadata">A byte array representing the new metadata.</param>
            <param name="userCredentials">User credentials to use for the operation.</param>
            <returns>A <see cref="T:EventStore.ClientAPI.WriteResult"/>.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously reads the metadata for a stream and converts the metadata into a <see cref="T:EventStore.ClientAPI.StreamMetadata"/>.
            </summary>
            <param name="stream">The name of the stream for which to read metadata.</param>
            <param name="userCredentials">User credentials to use for the operation.</param>
            <returns>A <see cref="T:EventStore.ClientAPI.StreamMetadataResult"/> representing the result of the operation.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsRawBytesAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously reads the metadata for a stream as a byte array.
            </summary>
            <param name="stream">The name of the stream for which to read metadata.</param>
            <param name="userCredentials">User credentials to use for the operation.</param>
            <returns>A <see cref="T:EventStore.ClientAPI.StreamMetadataResult"/> representing the result of the operation.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.IEventStoreConnection.SetSystemSettingsAsync(EventStore.ClientAPI.SystemSettings,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Sets the global settings for the server or cluster to which the <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/>
            is connected.
            </summary>
            <param name="settings">The <see cref="T:EventStore.ClientAPI.SystemSettings"/> to apply.</param>
            <param name="userCredentials">User credentials to use for the operation.</param>
        </member>
        <member name="P:EventStore.ClientAPI.IEventStoreConnection.ConnectionName">
            <summary>
            Gets the name of this connection. A connection name can be used for disambiguation
            in log files.
            </summary>
        </member>
        <member name="E:EventStore.ClientAPI.IEventStoreConnection.Connected">
            <summary>
            Fired when an <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> connects to an Event Store server.
            </summary>
        </member>
        <member name="E:EventStore.ClientAPI.IEventStoreConnection.Disconnected">
            <summary>
            Fired when an <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> is disconnected from an Event Store server
            by some means other than by calling the <see cref="M:EventStore.ClientAPI.IEventStoreConnection.Close"/> method.
            </summary>
        </member>
        <member name="E:EventStore.ClientAPI.IEventStoreConnection.Reconnecting">
            <summary>
            Fired when an <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> is attempting to reconnect to an Event Store
            server following a disconnection.
            </summary>
        </member>
        <member name="E:EventStore.ClientAPI.IEventStoreConnection.Closed">
            <summary>
            Fired when an <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> is closed either using the <see cref="M:EventStore.ClientAPI.IEventStoreConnection.Close"/>
            method, or when reconnection limits are reached without a successful connection being established.
            </summary>
        </member>
        <member name="E:EventStore.ClientAPI.IEventStoreConnection.ErrorOccurred">
            <summary>
            Fired when an error is thrown on an <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/>.
            </summary>
        </member>
        <member name="E:EventStore.ClientAPI.IEventStoreConnection.AuthenticationFailed">
            <summary>
            Fired when a client fails to authenticate to an Event Store server.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Core.IEventStoreTransactionConnection.TransactionalWriteAsync(EventStore.ClientAPI.EventStoreTransaction,System.Collections.Generic.IEnumerable{EventStore.ClientAPI.EventData},EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Writes to a transaction in the event store asynchronously
            </summary>
            <remarks>
            A <see cref="T:EventStore.ClientAPI.EventStoreTransaction"/> allows the calling of multiple writes with multiple
            round trips over long periods of time between the caller and the event store. This method
            is only available through the TCP interface and no equivalent exists for the RESTful interface.
            </remarks>
            <param name="transaction">The <see cref="T:EventStore.ClientAPI.EventStoreTransaction"/> to write to.</param>
            <param name="events">The events to write</param>
            <param name="userCredentials">The optional user credentials to perform operation with.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> allowing the caller to control the async operation</returns>
        </member>
        <member name="M:EventStore.ClientAPI.Core.IEventStoreTransactionConnection.CommitTransactionAsync(EventStore.ClientAPI.EventStoreTransaction,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Commits a multi-write transaction in the Event Store
            </summary>
            <param name="transaction">The <see cref="T:EventStore.ClientAPI.EventStoreTransaction"></see> to commit</param>
            <param name="userCredentials">The optional user credentials to perform operation with.</param>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreNodeConnection.#ctor(EventStore.ClientAPI.ConnectionSettings,EventStore.ClientAPI.Core.IEndPointDiscoverer,System.String)">
            <summary>
            Constructs a new instance of a <see cref="T:EventStore.ClientAPI.EventStoreConnection"/>
            </summary>
            <param name="settings">The <see cref="T:EventStore.ClientAPI.ConnectionSettings"/> containing the settings for this connection.</param>
            <param name="endPointDiscoverer">Discoverer of destination node end point.</param>
            <param name="connectionName">Optional name of connection (will be generated automatically, if not provided)</param>
        </member>
        <member name="T:EventStore.ClientAPI.Exceptions.ClusterException">
            <summary>
            Exception thrown if cluster discovery fails.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ClusterException.#ctor">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ClusterException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ClusterException.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ClusterException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ClusterException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ClusterException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ClusterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ClusterException"/>.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.Exceptions.NotAuthenticatedException">
            <summary>
            Exception thrown if an operation requires authentication but
            the client is not authenticated.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.NotAuthenticatedException.#ctor">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.NotAuthenticatedException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.NotAuthenticatedException.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.NotAuthenticatedException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.NotAuthenticatedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.NotAuthenticatedException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.NotAuthenticatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.NotAuthenticatedException"/>.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.StreamAcl">
            <summary>
            Represents an access control list for a stream
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamAcl.ReadRoles">
            <summary>
            Roles and users permitted to read the stream
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamAcl.WriteRoles">
            <summary>
            Roles and users permitted to write to the stream
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamAcl.DeleteRoles">
            <summary>
            Roles and users permitted to delete the stream
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamAcl.MetaReadRoles">
            <summary>
            Roles and users permitted to read stream metadata
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamAcl.MetaWriteRoles">
            <summary>
            Roles and users permitted to write stream metadata
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.StreamAcl.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new Stream Access Control List
            </summary>
            <param name="readRole">Role and user permitted to read the stream</param>
            <param name="writeRole">Role and user permitted to write to the stream</param>
            <param name="deleteRole">Role and user permitted to delete the stream</param>
            <param name="metaReadRole">Role and user permitted to read stream metadata</param>
            <param name="metaWriteRole">Role and user permitted to write stream metadata</param>
        </member>
        <member name="M:EventStore.ClientAPI.StreamAcl.#ctor(System.String[],System.String[],System.String[],System.String[],System.String[])">
            <summary>
            
            </summary>
            <param name="readRoles">Roles and users permitted to read the stream</param>
            <param name="writeRoles">Roles and users permitted to write to the stream</param>
            <param name="deleteRoles">Roles and users permitted to delete the stream</param>
            <param name="metaReadRoles">Roles and users permitted to read stream metadata</param>
            <param name="metaWriteRoles">Roles and users permitted to write stream metadata</param>
        </member>
        <member name="M:EventStore.ClientAPI.StreamAcl.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:EventStore.ClientAPI.StreamAcl.ReadRole">
            <summary>
            Role or user permitted to read the stream
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.StreamAcl.WriteRole">
            <summary>
            Role or user permitted to write to the stream
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.StreamAcl.DeleteRole">
            <summary>
            Role or user permitted to delete from the stream 
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.StreamAcl.MetaReadRole">
            <summary>
            Role or user permitted to read the stream metadata
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.StreamAcl.MetaWriteRole">
            <summary>
            Role or user permitted to write to the stream metadata
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.SubscriptionDropReason">
            <summary>
            Represents the reason subscription drop happened
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.SubscriptionDropReason.UserInitiated">
            <summary>
            Subscription dropped because the client called Close.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.SubscriptionDropReason.NotAuthenticated">
            <summary>
            Subscription dropped because the client is not authenticated.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.SubscriptionDropReason.AccessDenied">
            <summary>
            Subscription dropped because access to the stream was denied.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.SubscriptionDropReason.SubscribingError">
            <summary>
            Subscription dropped because of an error in the subscription phase.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.SubscriptionDropReason.ServerError">
            <summary>
            Subscription dropped because of a server error.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.SubscriptionDropReason.ConnectionClosed">
            <summary>
            Subscription dropped because the connection was closed.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.SubscriptionDropReason.CatchUpError">
            <summary>
            Subscription dropped because of an error during the catch-up phase.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.SubscriptionDropReason.ProcessingQueueOverflow">
            <summary>
            Subscription dropped because it's queue overflowed.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.SubscriptionDropReason.EventHandlerException">
            <summary>
            Subscription dropped because an exception was thrown by a handler.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.SubscriptionDropReason.Unknown">
            <summary>
            Subscription was dropped for an unknown reason.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.SubscriptionDropReason.NotFound">
            <summary>
            Target of persistent subscription was not found. Needs to be created first
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.Exceptions.AccessDeniedException">
            <summary>
            Exception thrown when a user is not authorised to carry out
            an operation.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.AccessDeniedException.#ctor">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.AccessDeniedException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.AccessDeniedException.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.AccessDeniedException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.AccessDeniedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.AccessDeniedException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.AccessDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.AccessDeniedException"/>.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.StreamMetadata">
            <summary>
            A class representing stream metadata with strongly typed properties
            for system values and a dictionary-like interface for custom values.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamMetadata.MaxCount">
            <summary>
            The maximum number of events allowed in the stream.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamMetadata.MaxAge">
            <summary>
            The maximum age of events allowed in the stream.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamMetadata.TruncateBefore">
            <summary>
            The event number from which previous events can be scavenged.
            This is used to implement soft-deletion of streams.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamMetadata.CacheControl">
            <summary>
            The amount of time for which the stream head is cachable.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamMetadata.Acl">
            <summary>
            The access control list for the stream.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadata.Create(System.Nullable{System.Int32},System.Nullable{System.TimeSpan},System.Nullable{System.Int32},System.Nullable{System.TimeSpan},EventStore.ClientAPI.StreamAcl)">
            <summary>
            Creates a <see cref="T:EventStore.ClientAPI.StreamMetadata"/> with the specified parameters.
            </summary>
            <param name="maxCount">The maximum number of events allowed in the stream.</param>
            <param name="maxAge">The maximum age of events allowed in the stream.</param>
            <param name="truncateBefore">The event number from which previous events can be scavenged.</param>
            <param name="cacheControl">The amount of time for which the stream head is cachable.</param>
            <param name="acl">The access control list for the stream.</param>
            <returns></returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadata.Build">
            <summary>
            Builds a <see cref="T:EventStore.ClientAPI.StreamMetadata"/> from a <see cref="T:EventStore.ClientAPI.StreamMetadataBuilder"/>.
            </summary>
            <returns>An instance of <see cref="T:EventStore.ClientAPI.StreamMetadata"/>.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadata.GetValue``1(System.String)">
            <summary>
            Get a value of type T for the given key from the custom metadata.
            This method will throw an <see cref="T:System.ArgumentException"/> if the
            key is not found.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">A key.</param>
            <returns>Value of type T for the key.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadata.TryGetValue``1(System.String,``0@)">
            <summary>
            Tries to get a value of type T for the given key from the custom
            metadata, and if it exists returns true from the method and gives
            the value as an out parameter.
            </summary>
            <param name="key">A key.</param>
            <param name="value">Output variable for the value of type T for the key.</param>
            <typeparam name="T">The type of the value.</typeparam>
            <returns>True if the key exists, false otherwise.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadata.GetValueAsRawJsonString(System.String)">
            <summary>
            Gets a string containing raw JSON value for the given key.
            </summary>
            <param name="key">A key.</param>
            <returns>String containing raw JSON value for the key.</returns>
            <exception cref="T:System.ArgumentException">If the key does not exist.</exception>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadata.TryGetValueAsRawJsonString(System.String,System.String@)">
            <summary>
            Tries to get a string containing raw JSON value for the given key.
            </summary>
            <param name="key">A key.</param>
            <param name="value">Output variable for the value for the key.</param>
            <returns>True if the key exists, false otherwise.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadata.AsJsonBytes">
            <summary>
            Returns a byte array representing the stream metadata
            as JSON encoded as UTF8 with no byte order mark.
            </summary>
            <returns>Byte array representing the stream metadata.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadata.AsJsonString">
            <summary>
            Returns a JSON string representing the stream metadata.
            </summary>
            <returns>A string representing the stream metadata.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.StreamMetadata.FromJsonBytes(System.Byte[])">
            <summary>
            Builds a <see cref="T:EventStore.ClientAPI.StreamMetadata"/> object from a byte array
            containing stream metadata.
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="P:EventStore.ClientAPI.StreamMetadata.CustomKeys">
            <summary>
            An enumerable of the keys in the user-provided metadata.
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.StreamMetadata.CustomMetadataAsRawJsons">
            <summary>
            An enumerable of key-value pairs of keys to JSON text for user-provider metadata.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.EventStoreConnection">
            <summary>
            Contains factory methods for building connections to an Event Store server.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreConnection.Create(System.Net.IPEndPoint,System.String)">
            <summary>
            Creates a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> to single node using default <see cref="T:EventStore.ClientAPI.ConnectionSettings"/>
            </summary>
            <param name="connectionName">Optional name of connection (will be generated automatically, if not provided)</param>
            <param name="tcpEndPoint">The <see cref="T:System.Net.IPEndPoint"/> to connect to.</param>
            <returns>a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/></returns>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,System.Net.IPEndPoint,System.String)">
            <summary>
            Creates a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> to single node using specific <see cref="T:EventStore.ClientAPI.ConnectionSettings"/>
            </summary>
            <param name="settings">The <see cref="T:EventStore.ClientAPI.ConnectionSettings"/> to apply to the new connection</param>
            <param name="tcpEndPoint">The <see cref="T:System.Net.IPEndPoint"/> to connect to.</param>
            <param name="connectionName">Optional name of connection (will be generated automatically, if not provided)</param>
            <returns>a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/></returns>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,EventStore.ClientAPI.ClusterSettings,System.String)">
            <summary>
            Creates a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> to EventStore cluster 
            using specific <see cref="T:EventStore.ClientAPI.ConnectionSettings"/> and <see cref="T:EventStore.ClientAPI.ClusterSettings"/>
            </summary>
            <param name="connectionSettings">The <see cref="T:EventStore.ClientAPI.ConnectionSettings"/> to apply to the new connection</param>
            <param name="clusterSettings">The <see cref="T:EventStore.ClientAPI.ClusterSettings"/> that determine cluster behavior.</param>
            <param name="connectionName">Optional name of connection (will be generated automatically, if not provided)</param>
            <returns>a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/></returns>
        </member>
        <member name="T:EventStore.ClientAPI.EventStoreCatchUpSubscription">
            <summary>
            Base class representing catch-up subscriptions.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventStoreCatchUpSubscription.Log">
            <summary>
            The <see cref="T:EventStore.ClientAPI.ILogger"/> to use for the subscription.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadBatchSize">
            <summary>
            The batch size to use during the read phase of the subscription.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventStoreCatchUpSubscription.MaxPushQueueSize">
            <summary>
            The maximum number of events to buffer before the subscription drops.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventStoreCatchUpSubscription.EventAppeared">
            <summary>
            Action invoked when a new event appears on the subscription.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventStoreCatchUpSubscription.Verbose">
            <summary>
            Whether or not to use verbose logging (useful during debugging).
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventStoreCatchUpSubscription.ShouldStop">
            <summary>
             stop has been called.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTill(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            Read events until the given position or event number.
            </summary>
            <param name="connection">The connection.</param>
            <param name="resolveLinkTos">Whether to resolve Link events.</param>
            <param name="userCredentials">User credentials for the operation.</param>
            <param name="lastCommitPosition">The commit position to read until.</param>
            <param name="lastEventNumber">The event number to read until.</param>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcess(EventStore.ClientAPI.ResolvedEvent)">
            <summary>
            Try to process a single <see cref="T:EventStore.ClientAPI.ResolvedEvent"/>.
            </summary>
            <param name="e">The <see cref="T:EventStore.ClientAPI.ResolvedEvent"/> to process.</param>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreCatchUpSubscription.#ctor(EventStore.ClientAPI.IEventStoreConnection,EventStore.ClientAPI.ILogger,System.String,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructs state for EventStoreCatchUpSubscription.
            </summary>
            <param name="connection">The connection.</param>
            <param name="log">The <see cref="T:EventStore.ClientAPI.ILogger"/> to use.</param>
            <param name="streamId">The stream name.</param>
            <param name="resolveLinkTos">Whether to resolve Link events.</param>
            <param name="userCredentials">User credentials for the operations.</param>
            <param name="eventAppeared">Action invoked when events are received.</param>
            <param name="liveProcessingStarted">Action invoked when the read phase finishes.</param>
            <param name="subscriptionDropped">Action invoked if the subscription drops.</param>
            <param name="verboseLogging">Whether to use verbose logging.</param>
            <param name="readBatchSize">Batch size for use in the reading phase.</param>
            <param name="maxPushQueueSize">The maximum number of events to buffer before dropping the subscription.</param>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(System.TimeSpan)">
            <summary>
            Attempts to stop the subscription.
            </summary>
            <param name="timeout">The amount of time within which the subscription should stop.</param>
            <exception cref="T:System.TimeoutException">Thrown if the subscription fails to stop within it's timeout period.</exception>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop">
            <summary>
            Attempts to stop the subscription without blocking for completion of stop
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll">
            <summary>
            Indicates whether the subscription is to all events or to
            a specific stream.
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId">
            <summary>
            The name of the stream to which the subscription is subscribed
            (empty if subscribed to all).
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.EventStoreAllCatchUpSubscription">
            <summary>
            A catch-up subscription to all events in the Event Store.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreAllCatchUpSubscription.ReadEventsTill(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            Read events until the given position.
            </summary>
            <param name="connection">The connection.</param>
            <param name="resolveLinkTos">Whether to resolve Link events.</param>
            <param name="userCredentials">User credentials for the operation.</param>
            <param name="lastCommitPosition">The commit position to read until.</param>
            <param name="lastEventNumber">The event number to read until.</param>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreAllCatchUpSubscription.TryProcess(EventStore.ClientAPI.ResolvedEvent)">
            <summary>
            Try to process a single <see cref="T:EventStore.ClientAPI.ResolvedEvent"/>.
            </summary>
            <param name="e">The <see cref="T:EventStore.ClientAPI.ResolvedEvent"/> to process.</param>
        </member>
        <member name="P:EventStore.ClientAPI.EventStoreAllCatchUpSubscription.LastProcessedPosition">
            <summary>
            The last position processed on the subscription.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.EventStoreStreamCatchUpSubscription">
            <summary>
            A catch-up subscription to a single stream in the Event Store.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.ReadEventsTill(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            Read events until the given event number.
            </summary>
            <param name="connection">The connection.</param>
            <param name="resolveLinkTos">Whether to resolve Link events.</param>
            <param name="userCredentials">User credentials for the operation.</param>
            <param name="lastCommitPosition">The commit position to read until.</param>
            <param name="lastEventNumber">The event number to read until.</param>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.TryProcess(EventStore.ClientAPI.ResolvedEvent)">
            <summary>
            Try to process a single <see cref="T:EventStore.ClientAPI.ResolvedEvent"/>.
            </summary>
            <param name="e">The <see cref="T:EventStore.ClientAPI.ResolvedEvent"/> to process.</param>
        </member>
        <member name="P:EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.LastProcessedEventNumber">
            <summary>
            The last event number processed on the subscription.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.EventData">
            <summary>
            Represents an event to be written.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventData.EventId">
            <summary>
            The ID of the event, used as part of the idempotent write check.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventData.Type">
            <summary>
            The name of the event type. It is strongly recommended that these
            use lowerCamelCase if projections are to be used.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventData.IsJson">
            <summary>
            Flag indicating whether the data and metadata are JSON.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventData.Data">
            <summary>
            The raw bytes of the event data.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventData.Metadata">
            <summary>
            The raw bytes of the event metadata.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.EventData.#ctor(System.Guid,System.String,System.Boolean,System.Byte[],System.Byte[])">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.EventData"/>.
            </summary>
            <param name="eventId">The ID of the event, used as part of the idempotent write check.</param>
            <param name="type">The name of the event type. It is strongly recommended that these
            use lowerCamelCase if projections are to be used.</param>
            <param name="isJson">Flag indicating whether the data and metadata are JSON.</param>
            <param name="data">The raw bytes of the event data.</param>
            <param name="metadata">The raw bytes of the event metadata.</param>
        </member>
        <member name="T:EventStore.ClientAPI.Exceptions.ServerErrorException">
            <summary>
            Exception thrown if a server-side error occurs during an
            operation.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ServerErrorException.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.ServerErrorException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ServerErrorException.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.ServerErrorException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ServerErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.ServerErrorException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ServerErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.ServerErrorException"/>.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.ReadDirection">
            <summary>
            Represents the direction of read operation (both from $all and usual streams)
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ReadDirection.Forward">
            <summary>
            From beginning to end.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ReadDirection.Backward">
            <summary>
            From end to beginning.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.ResolvedEvent">
            <summary>
            A structure representing a single event or an resolved link event.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ResolvedEvent.Event">
            <summary>
            The event, or the resolved link event if this <see cref="T:EventStore.ClientAPI.ResolvedEvent"/> is
            a link event.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ResolvedEvent.Link">
            <summary>
            The link event if this <see cref="T:EventStore.ClientAPI.ResolvedEvent"/> is a link event.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ResolvedEvent.OriginalPosition">
            <summary>
            The logical position of the <see cref="P:EventStore.ClientAPI.ResolvedEvent.OriginalEvent"/>.
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.ResolvedEvent.OriginalEvent">
            <summary>
            Returns the event that was read or which triggered the subscription.
            
            If this <see cref="T:EventStore.ClientAPI.ResolvedEvent"/> represents a link event, the Link
            will be the <see cref="P:EventStore.ClientAPI.ResolvedEvent.OriginalEvent"/>, otherwise it will be the
            Event.
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.ResolvedEvent.IsResolved">
            <summary>
            Indicates whether this <see cref="T:EventStore.ClientAPI.ResolvedEvent"/> is a resolved link
            event.
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.ResolvedEvent.OriginalStreamId">
            <summary>
            The stream name of the <see cref="P:EventStore.ClientAPI.ResolvedEvent.OriginalEvent"/>.
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.ResolvedEvent.OriginalEventNumber">
            <summary>
            The event number in the stream of the <see cref="P:EventStore.ClientAPI.ResolvedEvent.OriginalEvent"/>.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException">
            <summary>
            Exception thrown if an <see cref="T:EventStore.ClientAPI.EventStoreConnection"/> is
            unable to establish a connection to an Event Store server.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException.#ctor">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException"/>.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.Exceptions.InvalidTransactionException">
            <summary>
            Exception thrown if there is an attempt to operate inside a
            transaction which does not exist.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.InvalidTransactionException.#ctor">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.InvalidTransactionException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.InvalidTransactionException.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.InvalidTransactionException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.InvalidTransactionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.InvalidTransactionException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.InvalidTransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.InvalidTransactionException"/>.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.Exceptions.StreamDeletedException">
            <summary>
            Exception thrown if an operation is attempted on a stream which
            has been deleted.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.Exceptions.StreamDeletedException.Stream">
            <summary>
            The name of the deleted stream.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.StreamDeletedException.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.StreamDeletedException"/>.
            </summary>
            <param name="stream">The name of the deleted stream.</param>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.StreamDeletedException.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.StreamDeletedException"/>.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.Exceptions.WrongExpectedVersionException">
            <summary>
            Exception thrown if the expected version specified on an operation
            does not match the version of the stream when the operation was attempted. 
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.WrongExpectedVersionException.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.WrongExpectedVersionException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.WrongExpectedVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.WrongExpectedVersionException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.WrongExpectedVersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.WrongExpectedVersionException"/>.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.PersistentSubscriptionCreateResult">
            <summary>
            A Persistent Subscription Create Result is the result of a single operation creating a
            persistent subscription in the event store
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionCreateResult.Status">
            <summary>
            The <see cref="T:EventStore.ClientAPI.PersistentSubscriptionCreateStatus"/> representing the status of this create attempt
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.PersistentSubscriptionCreateStatus">
            <summary>
            Enumeration representing the status of a single subscription create message.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionCreateStatus.Success">
            <summary>
            The subscription was created successfully
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionCreateStatus.NotFound">
            <summary>
            The subscription already exists
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionCreateStatus.Failure">
            <summary>
            Some failure happened creating the subscription
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.EventStoreTransaction">
            <summary>
            Represents a multi-request transaction with the Event Store
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.EventStoreTransaction.TransactionId">
            <summary>
            The ID of the transaction. This can be used to recover
            a transaction later.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreTransaction.#ctor(System.Int64,EventStore.ClientAPI.SystemData.UserCredentials,EventStore.ClientAPI.Core.IEventStoreTransactionConnection)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.EventStoreTransaction"/>
            </summary>
            <param name="transactionId">The transaction id of the transaction</param>
            <param name="userCredentials">User credentials under which transaction is committed.</param>
            <param name="connection">The connection the transaction is hooked to</param>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreTransaction.CommitAsync">
            <summary>
            Asynchronously commits this transaction
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that returns expected version for following write requests</returns>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreTransaction.WriteAsync(EventStore.ClientAPI.EventData[])">
            <summary>
            Writes to a transaction in the event store asynchronously
            </summary>
            <param name="events">The events to write</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> allowing the caller to control the async operation</returns>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreTransaction.WriteAsync(System.Collections.Generic.IEnumerable{EventStore.ClientAPI.EventData})">
            <summary>
            Writes to a transaction in the event store asynchronously
            </summary>
            <param name="events">The events to write</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> allowing the caller to control the async operation</returns>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreTransaction.Rollback">
            <summary>
            Rollsback this transaction.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.EventStoreTransaction.Dispose">
            <summary>
            Disposes this transaction rolling it back if not already committed
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.StreamEventsSlice">
            <summary>
            An Stream Events Slice represents the result of a single read operation to the event store.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamEventsSlice.Status">
            <summary>
            The <see cref="T:EventStore.ClientAPI.SliceReadStatus"/> representing the status of this read attempt
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamEventsSlice.Stream">
            <summary>
            The name of the stream read
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamEventsSlice.FromEventNumber">
            <summary>
            The starting point (represented as a sequence number) of the read operation.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamEventsSlice.ReadDirection">
            <summary>
            The direction of read request.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamEventsSlice.Events">
            <summary>
            The events read represented as <see cref="T:EventStore.ClientAPI.ResolvedEvent"/>
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamEventsSlice.NextEventNumber">
            <summary>
            The next event number that can be read.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamEventsSlice.LastEventNumber">
            <summary>
            The last event number in the stream.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamEventsSlice.IsEndOfStream">
            <summary>
            A boolean representing whether or not this is the end of the stream.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.Exceptions.CommandNotExpectedException">
            <summary>
            Exception thrown if an unexpected command is received.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.CommandNotExpectedException.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.CommandNotExpectedException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.CommandNotExpectedException.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.CommandNotExpectedException"/>.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.Exceptions.ConnectionClosedException">
            <summary>
            Exception thrown by ongoing operations which are terminated
            by an <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/> closing.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ConnectionClosedException.#ctor">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ConnectionClosedException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ConnectionClosedException.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ConnectionClosedException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ConnectionClosedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ConnectionClosedException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.ConnectionClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ConnectionClosedException"/>.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.Exceptions.NoResultException">
            <summary>
            Exception thrown if there is no result for an operation for
            which one is expected.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.NoResultException.#ctor">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.NoResultException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.NoResultException.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.NoResultException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.NoResultException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.NoResultException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.NoResultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.NoResultException"/>.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.Exceptions.OperationTimedOutException">
            <summary>
            Exception thrown if an operation times out.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.OperationTimedOutException.#ctor">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.OperationTimedOutException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.OperationTimedOutException.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.OperationTimedOutException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.OperationTimedOutException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.OperationTimedOutException"/>.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.OperationTimedOutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.OperationTimedOutException"/>.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.Exceptions.RetriesLimitReachedException">
            <summary>
            Exception thrown if the number of retries for an operation is reached.
            To change the number of retries attempted for an operation, use the methods
            <see cref="M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo(System.Int32)"/> or 
            <see cref="M:EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying"/> and pass the resulting
            <see cref="T:EventStore.ClientAPI.ConnectionSettings"/> into the constructor of the connection.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.RetriesLimitReachedException.#ctor(System.Int32)">
            <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.RetriesLimitReachedException"/>.
            </summary>
            <param name="retries">The number of retries attempted.</param>
        </member>
        <member name="M:EventStore.ClientAPI.Exceptions.RetriesLimitReachedException.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.RetriesLimitReachedException"/>.
            </summary>
            <param name="item">The name of the item for which retries were attempted.</param>
            <param name="retries">The number of retries attempted.</param>
        </member>
        <member name="T:EventStore.ClientAPI.PersistentSubscriptionDeleteResult">
            <summary>
            A \Persistent Subscription Create Result is the result of a single operation creating a
            persistent subscription in the event store
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionDeleteResult.Status">
            <summary>
            The <see cref="T:EventStore.ClientAPI.PersistentSubscriptionDeleteStatus"/> representing the status of this create attempt
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.PersistentSubscriptionDeleteStatus">
            <summary>
            Enumeration representing the status of a single subscription create message.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionDeleteStatus.Success">
            <summary>
            The subscription was created successfully
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.PersistentSubscriptionDeleteStatus.Failure">
            <summary>
            Some failure happened creating the subscription
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.Position">
            <summary>
            A structure referring to a potential logical record position
            in the Event Store transaction file.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.Position.Start">
            <summary>
            Position representing the start of the transaction file
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.Position.End">
            <summary>
            Position representing the end of the transaction file
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.Position.CommitPosition">
            <summary>
            The commit position of the record
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.Position.PreparePosition">
            <summary>
            The prepare position of the record.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Position.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructs a position with the given commit and prepare positions.
            It is not guaranteed that the position is actually the start of a
            record in the transaction file.
            
            The commit position cannot be less than the prepare position.
            </summary>
            <param name="commitPosition">The commit position of the record.</param>
            <param name="preparePosition">The prepare position of the record.</param>
        </member>
        <member name="M:EventStore.ClientAPI.Position.op_LessThan(EventStore.ClientAPI.Position,EventStore.ClientAPI.Position)">
            <summary>
            Compares whether p1 &lt; p2.
            </summary>
            <param name="p1">A <see cref="T:EventStore.ClientAPI.Position"/>.</param>
            <param name="p2">A <see cref="T:EventStore.ClientAPI.Position"/>.</param>
            <returns>True if p1 &lt; p2.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.Position.op_GreaterThan(EventStore.ClientAPI.Position,EventStore.ClientAPI.Position)">
            <summary>
            Compares whether p1 &gt; p2.
            </summary>
            <param name="p1">A <see cref="T:EventStore.ClientAPI.Position"/>.</param>
            <param name="p2">A <see cref="T:EventStore.ClientAPI.Position"/>.</param>
            <returns>True if p1 &gt; p2.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.Position.op_GreaterThanOrEqual(EventStore.ClientAPI.Position,EventStore.ClientAPI.Position)">
            <summary>
            Compares whether p1 &gt;= p2.
            </summary>
            <param name="p1">A <see cref="T:EventStore.ClientAPI.Position"/>.</param>
            <param name="p2">A <see cref="T:EventStore.ClientAPI.Position"/>.</param>
            <returns>True if p1 &gt;= p2.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.Position.op_LessThanOrEqual(EventStore.ClientAPI.Position,EventStore.ClientAPI.Position)">
            <summary>
            Compares whether p1 &lt;= p2.
            </summary>
            <param name="p1">A <see cref="T:EventStore.ClientAPI.Position"/>.</param>
            <param name="p2">A <see cref="T:EventStore.ClientAPI.Position"/>.</param>
            <returns>True if p1 &lt;= p2.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.Position.op_Equality(EventStore.ClientAPI.Position,EventStore.ClientAPI.Position)">
            <summary>
            Compares p1 and p2 for equality.
            </summary>
            <param name="p1">A <see cref="T:EventStore.ClientAPI.Position"/>.</param>
            <param name="p2">A <see cref="T:EventStore.ClientAPI.Position"/>.</param>
            <returns>True if p1 is equal to p2.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.Position.op_Inequality(EventStore.ClientAPI.Position,EventStore.ClientAPI.Position)">
            <summary>
            Compares p1 and p2 for equality.
            </summary>
            <param name="p1">A <see cref="T:EventStore.ClientAPI.Position"/>.</param>
            <param name="p2">A <see cref="T:EventStore.ClientAPI.Position"/>.</param>
            <returns>True if p1 is not equal to p2.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.Position.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:EventStore.ClientAPI.Position.Equals(EventStore.ClientAPI.Position)">
            <summary>
            Compares this instance of <see cref="T:EventStore.ClientAPI.Position"/> for equality
            with another instance.
            </summary>
            <param name="other">A <see cref="T:EventStore.ClientAPI.Position"/></param>
            <returns>True if this instance is equal to the other instance.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.Position.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:EventStore.ClientAPI.Position.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:EventStore.ClientAPI.ProjectionsManager">
            <summary>
            API for managing projections in the Event Store through C# code. Communicates
            with the Event Store over the RESTful API.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.ProjectionsManager.#ctor(EventStore.ClientAPI.ILogger,System.Net.IPEndPoint,System.TimeSpan)">
            <summary>
            Creates a new instance of <see cref="T:EventStore.ClientAPI.ProjectionsManager"/>.
            </summary>
            <param name="log">An instance of <see cref="T:EventStore.ClientAPI.ILogger"/> to use for logging.</param>
            <param name="httpEndPoint">HTTP endpoint of an Event Store server.</param>
            <param name="operationTimeout"></param>
        </member>
        <member name="M:EventStore.ClientAPI.ProjectionsManager.EnableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously enables a projection 
            </summary>
            <param name="name">The name of the projection.</param>
            <param name="userCredentials">Credentials for a user with permission to enable a projection</param>
            <returns>A task representing the operation.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.ProjectionsManager.DisableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously aborts and disables a projection without writing a checkpoint.
            </summary>
            <param name="name">The name of the projection.</param>
            <param name="userCredentials">Credentials for a user with permission to disable a projection.</param>
            <returns>A task representing the operation.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.ProjectionsManager.AbortAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously disables a projection.
            </summary>
            <param name="name">The name of the projection.</param>
            <param name="userCredentials">Credentials for a user with permission to disable a projection.</param>
            <returns>A task representing the operation.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.ProjectionsManager.CreateOneTimeAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously creates a one-time query.
            </summary>
            <param name="query">The JavaScript source code for the query.</param>
            <param name="userCredentials">Credentials for a user with permission to create a query.</param>
        </member>
        <member name="M:EventStore.ClientAPI.ProjectionsManager.CreateTransientAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously creates a one-time query.
            </summary>
            <param name="name">A name for the query.</param>
            <param name="query">The JavaScript source code for the query.</param>
            <param name="userCredentials">Credentials for a user with permission to create a query.</param>
        </member>
        <member name="M:EventStore.ClientAPI.ProjectionsManager.CreateContinuousAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously creates a continuous projection.
            </summary>
            <param name="name">The name of the projection.</param>
            <param name="query">The JavaScript source code for the query.</param>
            <param name="userCredentials">Credentials for a user with permission to create a query.</param>
        </member>
        <member name="M:EventStore.ClientAPI.ProjectionsManager.ListAllAsync(EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously lists this status of all projections.
            </summary>
            <param name="userCredentials">Credentials for the operation.</param>
            <returns>String of JSON containing projection statuses.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.ProjectionsManager.ListOneTimeAsync(EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously lists this status of all one-time projections.
            </summary>
            <param name="userCredentials">Credentials for the operation.</param>
            <returns>String of JSON containing projection statuses.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.ProjectionsManager.ListContinuousAsync(EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Synchronously lists this status of all continuous projections.
            </summary>
            <param name="userCredentials">Credentials for the operation.</param>
            <returns>String of JSON containing projection statuses.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.ProjectionsManager.GetStatusAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously gets the status of a projection.
            </summary>
            <param name="name">The name of the projection.</param>
            <param name="userCredentials">Credentials for the operation.</param>
            <returns>String of JSON containing projection status.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.ProjectionsManager.GetStateAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously gets the state of a projection.
            </summary>
            <param name="name">The name of the projection.</param>
            <param name="userCredentials">Credentials for the operation.</param>
            <returns>String of JSON containing projection state.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.ProjectionsManager.GetStatisticsAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously gets the statistics of a projection.
            </summary>
            <param name="name">The name of the projection.</param>
            <param name="userCredentials">Credentials for the operation.</param>
            <returns>String of JSON containing projection statistics.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.ProjectionsManager.GetQueryAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously gets the status of a query.
            </summary>
            <param name="name">The name of the query.</param>
            <param name="userCredentials">Credentials for the operation.</param>
            <returns>String of JSON containing query status.</returns>
        </member>
        <member name="M:EventStore.ClientAPI.ProjectionsManager.UpdateQueryAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously updates the definition of a query.
            </summary>
            <param name="name">The name of the query.</param>
            <param name="query">The JavaScript source code of the query.</param>
            <param name="userCredentials">Credentials for the operation.</param>
        </member>
        <member name="M:EventStore.ClientAPI.ProjectionsManager.DeleteAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
            <summary>
            Asynchronously deletes a projection 
            </summary>
            <param name="name">The name of the projection.</param>
            <param name="userCredentials">Credentials for a user with permission to delete a projection</param>
            <returns>A task representing the operation.</returns>
        </member>
        <member name="T:EventStore.ClientAPI.RecordedEvent">
            <summary>
            Represents a previously written event
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.RecordedEvent.EventStreamId">
            <summary>
            The Event Stream that this event belongs to
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.RecordedEvent.EventId">
            <summary>
            The Unique Identifier representing this event
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.RecordedEvent.EventNumber">
            <summary>
            The number of this event in the stream
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.RecordedEvent.EventType">
            <summary>
            The type of event this is
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.RecordedEvent.Data">
            <summary>
            A byte array representing the data of this event
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.RecordedEvent.Metadata">
            <summary>
            A byte array representing the metadata associated with this event
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.RecordedEvent.IsJson">
            <summary>
            Indicates whether the content is internally marked as json
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.RecordedEvent.Created">
            <summary>
            A datetime representing when this event was created in the system
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.RecordedEvent.CreatedEpoch">
            <summary>
            A long representing the milliseconds since the epoch when the was created in the system
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.RecordedEvent.DebugDataView">
            <summary>
            Shows the event data interpreted as a UTF8-encoded string.
            
            NOTE: This is only available in DEBUG builds of the client API.
            </summary>
        </member>
        <member name="P:EventStore.ClientAPI.RecordedEvent.DebugMetadataView">
            <summary>
            Shows the event metadata interpreted as a UTF8-encoded string.
            
            NOTE: This is only available in DEBUG builds of the client API.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.SliceReadStatus">
            <summary>
            Enumeration detailing the possible outcomes of reading a 
            slice of a stream.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.SliceReadStatus.Success">
            <summary>
            The read was successful.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.SliceReadStatus.StreamNotFound">
            <summary>
            The stream was not found.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.SliceReadStatus.StreamDeleted">
            <summary>
            The stream has previously existed but is deleted.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.StreamPosition">
            <summary>
            Constants for stream positions
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamPosition.Start">
            <summary>
            The first event in a stream
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.StreamPosition.End">
            <summary>
            The last event in the stream.
            </summary>
        </member>
        <member name="T:EventStore.ClientAPI.SystemData.UserCredentials">
            <summary>
            A username/password pair used for authentication and
            authorization to perform operations over an <see cref="T:EventStore.ClientAPI.IEventStoreConnection"/>.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.SystemData.UserCredentials.Username">
            <summary>
            The username
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.SystemData.UserCredentials.Password">
            <summary>
            The password
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.SystemData.UserCredentials.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.SystemData.UserCredentials"/>.
            </summary>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="T:EventStore.ClientAPI.ExpectedVersion">
            <summary>
            Constants used for expected version control
            </summary>
            <remarks>
            The use of expected version can be a bit tricky especially when discussing idempotency assurances given by the event store.
            
            There are four possible values that can be used for the passing of an expected version.
            
            ExpectedVersion.Any (-2) says that you should not conflict with anything.
            ExpectedVersion.NoStream (-1) says that the stream should not exist when doing your write.
            ExpectedVersion.EmptyStream (0) says the stream should exist but be empty when doing the write.
            
            Any other value states that the last event written to the stream should have a sequence number matching your 
            expected value.
            
            The Event Store will assure idempotency for all operations using any value in ExpectedVersion except for
            ExpectedVersion.Any. When using ExpectedVersion.Any the Event Store will do its best to assure idempotency but
            will not guarantee idempotency.
            </remarks>
        </member>
        <member name="F:EventStore.ClientAPI.ExpectedVersion.Any">
            <summary>
            This write should not conflict with anything and should always succeed.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ExpectedVersion.NoStream">
            <summary>
            The stream being written to should not yet exist. If it does exist treat that as a concurrency problem.
            </summary>
        </member>
        <member name="F:EventStore.ClientAPI.ExpectedVersion.EmptyStream">
            <summary>
            The stream should exist and should be empty. If it does not exist or is not empty treat that as a concurrency problem.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Transport.Tcp.LengthPrefixMessageFramer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EventStore.ClientAPI.Transport.Tcp.LengthPrefixMessageFramer"/> class.
            </summary>
        </member>
        <member name="M:EventStore.ClientAPI.Transport.Tcp.LengthPrefixMessageFramer.Parse(System.ArraySegment{System.Byte})">
            <summary>
            Parses a stream chunking based on length-prefixed framing. Calls are re-entrant and hold state internally.
            </summary>
            <param name="bytes">A byte array of data to append</param>
        </member>
    </members>
</doc>
